{"version":3,"sources":["serviceWorker.ts","Scripts/timeCounterKey.ts","Scripts/parseHelpers.ts","Scripts/timeZoneHelpers.ts","Scripts/parseConfigJson.ts","Scripts/brandingColorHelper.ts","Scripts/getConfig.ts","Scripts/parseStagesJson.ts","Scripts/parseEventsJson.ts","Scripts/parsePrizesJson.ts","Scripts/parseResourcesJson.ts","Scripts/parseLinksJson.ts","Styles/theme.ts","Styles/index.ts","Scripts/filterErrorsByType.ts","Components/Content/Debug/ErrorInfo.tsx","Components/Content/Debug/DebugMain.tsx","Components/Content/Links/LinkButton.tsx","Components/Content/Links/LinksMain.tsx","Components/Content/Stages/StageTimerNumber.tsx","Components/Content/Stages/StageTimer.tsx","Components/Content/Stages/StagesMain.tsx","Components/Layouts/NavBar.tsx","Components/Content/Events/EventInfo.tsx","Components/Content/Events/EventsMain.tsx","Components/Content/Prizes/PrizeInfo.tsx","Components/Content/Prizes/PrizesMain.tsx","Components/Content/Resources/ResourceInfo.tsx","Components/Content/Resources/ResourcesMain.tsx","Components/Layouts/ScrollingSections.tsx","Components/Layouts/TabbedSections.tsx","Components/Misc/Notifications.tsx","Components/Main.tsx","Styles/CustomThemeProvider.tsx","Styles/useDarkMode.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","key","propertyExistsFactory","data","document","errors","historicalPropertyPath","property","required","contains","push","type","error","toFix","warnIfNotLinkFactory","toLowerCase","includes","offsetMustBeWithinBoundsErrorMessage","correctTimezones","date","schemaTimeZoneOffset","isNaN","valueOf","setMinutes","getMinutes","getTimezoneOffset","parseConfigJson","brandingColor","config","configJson","propertyExists","configSchema","hackathonName","timeZoneOffset","tabs","toString","timeZoneOffsetParsed","charAt","timeZoneOffsetString","substring","hours","parseInt","indexOf","minutesString","length","minutes","offset","parseFloat","timeZoneOffsetParser","brandingColorParsed","schema","getConfig","readSchema","configErrors","stages","stagesJson","stageSchemas","Array","isArray","map","currentStage","index","propertyExistsInStage","hasStageName","hasEndTime","stageSchema","stageName","endTime","Date","parseStagesJson","stageErrors","events","eventsJson","eventSchemas","currentEvent","propertyExistsInEvent","warnIfNotLink","hasEventName","hasStartTime","hasEventDescription","hasType","eventSchema","eventName","speakers","startTime","eventDescription","icon","joinLink","parseEventsJson","eventErrors","prizes","prizesJson","prizeSchemas","currentPrize","propertyExistsInPrize","hasPrizeName","hasPrizeDescription","hasPrize","prizeSchema","prizeName","prizeDescription","prize","prizeValue","prizeSponsor","eligibility","parsePrizesJson","prizeErrors","resources","resourcesJson","resourceSchemas","currentResource","propertyExistsInResource","hasResourceName","hasResourceDescription","hasResourceLink","resourceSchema","resourceName","resourceDescription","resourceLink","resourceValue","parseResourcesJson","resourceErrors","links","linksJson","linksSchema","codeOfConduct","joinSlack","slackWorkspace","discord","facebook","instagram","twitter","linkedin","twitch","youtube","devpost","website","parseLinksJson","linkErrors","concat","lightTheme","createMuiTheme","palette","primary","main","undefined","secondary","success","info","warning","darkTheme","styles","makeStyles","theme","createStyles","padded","padding","spacing","margined","margin","marginedTopBottom","marginTop","marginBottom","marginedPadded","marginRight","marginsAuto","centerText","textAlign","pageTitle","infoColor","color","backgroundColor","warningColor","errorColor","getContrastText","fab","position","bottom","right","stageTimerNumberCard","filterErrorsByType","reduce","output","currentError","ErrorInfo","classes","ListItem","alignItems","ListItemAvatar","Avatar","className","ListItemText","Typography","variant","component","DebugMain","Container","List","LinkButton","title","link","Button","fullWidth","onClick","open","startIcon","LinksMain","Grid","container","item","xs","otherLinks","StageTimerNumber","children","label","Card","StageTimer","valueOfEndTime","nextStage","initialTime","direction","checkpoints","time","callback","reload","justify","Days","Hours","Minutes","Seconds","StagesMain","findCurrentStage","currentTime","stage","React","useState","setCurrentStage","useStyles","root","flexGrow","menuButton","NavBar","toggleTheme","mainWebsiteUrl","AppBar","Toolbar","IconButton","edge","aria-label","aria-controls","aria-haspopup","setKey","newKey","keysMatch","currentKey","EventInfo","event","currentTimeMilliseconds","toLocaleTimeString","toLocaleDateString","toLocaleString","EventsMain","showPastEvents","setShowPastEvents","setCurrentTimeMilliseconds","loaded","setLoaded","updateCurrentTime","now","setTimeout","Math","random","FormControlLabel","control","Switch","checked","onChange","name","binnedEvents","getTime","dateString","getFullYear","getMonth","getDate","binnedEventsArray","day","eventPlaceHolder","toDateString","tempDate","setDate","setMilliseconds","getMilliseconds","eventColor","binEventsByDate","eventList","dayIndex","PrizeInfo","PrizesMain","ResourceInfo","resource","ListItemSecondaryAction","Fab","ResourcesMain","ScrollingSections","Divider","TabPanel","value","role","hidden","id","aria-labelledby","Box","TabbedSections","currentTab","setCurrentTab","showEvents","showPrizes","showResources","Tabs","newValue","indicatorColor","textColor","scrollButtons","Tab","axis","onChangeIndex","element","variantIcon","CheckCircleIcon","WarningIcon","ErrorIcon","InfoIcon","fontSize","iconVariant","opacity","message","display","MySnackbarContentWrapper","props","onClose","other","Icon","SnackbarContent","clsx","aria-describedby","action","NotificationBar","notification","setNotification","handleClose","reason","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","Main","debugInfo","setDebugInfo","href","CustomThemeProvider","setTheme","componentMounted","setComponentMounted","setMode","mode","console","log","localStorage","setItem","useEffect","localTheme","getItem","matchMedia","matches","useDarkMode","ThemeProvider","CssBaseline","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.a8311b88.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","let key: number;\n\nexport const setKey = (newKey: number) => {\n  key = newKey;\n};\n\nconst keysMatch = (currentKey: number) => key === currentKey;\n\nexport const updateCurrentTime = (\n  key: number,\n  setCurrentTimeMilliseconds: (time: number) => void\n) => {\n  setKey(key);\n  setCurrentTimeMilliseconds(Date.now());\n  setTimeout(() => {\n    if (keysMatch(key)) {\n      updateCurrentTime(key, setCurrentTimeMilliseconds);\n    }\n  }, 1000);\n};\n","import { SchemaError } from \"../../@Types\";\n\nexport const propertyExistsFactory = (\n  data: { [key: string]: any },\n  document: string,\n  errors: SchemaError[],\n  historicalPropertyPath: string = \"\"\n) => {\n  if (historicalPropertyPath) {\n    // Make valid path when merged with current property\n    historicalPropertyPath += \".\";\n  }\n  return (property: string, required: boolean, contains: string) => {\n    if (!data[property]) {\n      errors.push({\n        document,\n        property: `${historicalPropertyPath}${property}`,\n        type: required ? \"error\" : \"info\",\n        error: `No ${historicalPropertyPath}${property} provided${\n          required ? \"!\" : \".\"\n        }`,\n        toFix: `${\n          required ? \"A\" : \"If you'd like, you can a\"\n        }dd a field called ${historicalPropertyPath}${property} to ${document} containing ${contains}.`,\n      });\n      return false;\n    }\n    return true;\n  };\n};\n\nexport const warnIfNotLinkFactory = (\n  data: { [key: string]: any },\n  document: string,\n  errors: SchemaError[],\n  historicalPropertyPath: string = \"\"\n) => {\n  if (historicalPropertyPath) {\n    // Make valid path when merged with current property\n    historicalPropertyPath += \".\";\n  }\n  return (property: string) => {\n    if (\n      !data[property].toLowerCase().includes(\"https://\") &&\n      !data[property].toLowerCase().includes(\"http://\")\n    ) {\n      errors.push({\n        document,\n        property: `${historicalPropertyPath}${property}`,\n        type: \"warning\",\n        error: `${historicalPropertyPath}${property} does not appear to be a link. Please double check this points to where you want hackers to go.`,\n        toFix:\n          \"Note: you may just want to add 'https://' or 'http://' in front of the link to make sure it links properly.\",\n      });\n    }\n  };\n};\n","const unableToParseErrorMessage = \"Unable to parse timeZoneOffset.\";\nconst offsetMustBeWithinBoundsErrorMessage = [\n  `${unableToParseErrorMessage} The offset cannot be greater than 12 or less than -12.`,\n  \"To fix this, just make sure that there is no more than a 12 hour offset. Example: +13:00 should become -11:00.\",\n];\n\nexport const timeZoneOffsetParser = (\n  timeZoneOffset: any\n): number | string[] => {\n  if (typeof timeZoneOffset === \"number\") {\n    if (timeZoneOffset < -12 || timeZoneOffset > 12) {\n      return offsetMustBeWithinBoundsErrorMessage;\n    }\n    return timeZoneOffset;\n  } else if (typeof timeZoneOffset === \"string\") {\n    // Verify the offset it either positive or negative\n    if (timeZoneOffset.charAt(0) !== \"+\" && timeZoneOffset.charAt(0) !== \"-\") {\n      return [\n        `${unableToParseErrorMessage} An offset string must either start with '+' or '-'.`,\n        \"Odds are, you just need to add a '+' in front of your timeZoneOffset.\",\n      ];\n    }\n    // Strip the plus off of the time zone offset, assume no sign is positive\n    let timeZoneOffsetString = timeZoneOffset;\n    if (timeZoneOffset.charAt(0) === \"+\") {\n      timeZoneOffsetString = timeZoneOffset.substring(1);\n    }\n    try {\n      if (timeZoneOffsetString.includes(\":\")) {\n        // Time zone offset is a time stamp\n        const hours = parseInt(\n          timeZoneOffsetString.substring(0, timeZoneOffsetString.indexOf(\":\"))\n        );\n        if (hours < -12 || hours > 12) {\n          return offsetMustBeWithinBoundsErrorMessage;\n        }\n        const minutesString = timeZoneOffsetString.substring(\n          timeZoneOffsetString.indexOf(\":\") + 1\n        );\n        if (minutesString.length !== 2) {\n          return [\n            `${unableToParseErrorMessage} Expected two digits for the minutes in the time stamp.`,\n            \"Just double check that your timeZoneOffset looks something like '+4:00'.\",\n          ];\n        }\n        const minutes = parseInt(minutesString);\n        if (minutes >= 60) {\n          return [\n            `${unableToParseErrorMessage} The minutes of the time stamp must be between 0 and 59.`,\n          ];\n        }\n        return hours >= 0 ? hours + minutes / 60 : hours - minutes / 60;\n      } else if (timeZoneOffsetString.includes(\".\")) {\n        // Time zone offset contains a decimal point\n        const offset = parseFloat(timeZoneOffsetString);\n        if (offset < -12 || offset > 12) {\n          return offsetMustBeWithinBoundsErrorMessage;\n        }\n        return offset;\n      } else {\n        // Time zone offset is an integer\n        const offset = parseInt(timeZoneOffsetString);\n        if (offset < -12 || offset > 12) {\n          return offsetMustBeWithinBoundsErrorMessage;\n        }\n        return offset;\n      }\n    } catch {\n      return [unableToParseErrorMessage];\n    }\n  } else {\n    return [unableToParseErrorMessage];\n  }\n};\n\nexport const correctTimezones = (date: Date, schemaTimeZoneOffset: number) => {\n  if (!isNaN(date.valueOf())) {\n    // Only adjust the time zone if it is a valid date...\n    date.setMinutes(\n      // Note schemaTimeZoneOffset is already negative by defintion, so we add it...\n      date.getMinutes() - (schemaTimeZoneOffset * 60 + date.getTimezoneOffset())\n    );\n  }\n  return date;\n};\n","import { ConfigSchema, SchemaError } from \"../../@Types\";\nimport configJson from \"../Data/config.json\";\nimport { propertyExistsFactory } from \"./parseHelpers\";\nimport { timeZoneOffsetParser } from \"./timeZoneHelpers\";\nimport { brandingColorParser } from \"./brandingColorHelper\";\n\nexport const parseConfigJson = (): [ConfigSchema, SchemaError[]] => {\n  const config: { [key: string]: any } = configJson;\n  const errors: SchemaError[] = [];\n  const propertyExists = propertyExistsFactory(config, \"config.json\", errors);\n  const configSchema: ConfigSchema = {\n    hackathonName: \"\",\n    timeZoneOffset: 0,\n    tabs: false,\n  };\n\n  // hackathonName\n  if (propertyExists(\"hackathonName\", true, \"the name of your hackathon\")) {\n    if (typeof config.hackathonName === \"string\") {\n      configSchema.hackathonName = config.hackathonName;\n    } else {\n      try {\n        // hackathonName can be converted to a string\n        configSchema.hackathonName = config.hackathonName.toString();\n        errors.push({\n          document: \"config.json\",\n          property: \"hackathonName\",\n          type: \"warning\",\n          error: \"hackathonName is not a string.\",\n          toFix:\n            \"In most cases, just make sure your hackathon name has quotes around it.\",\n        });\n      } catch {\n        // hackathonName cannot be converted to a string\n        errors.push({\n          document: \"config.json\",\n          property: \"hackathonName\",\n          type: \"error\",\n          error: \"hackathonName is not a string.\",\n        });\n      }\n    }\n  }\n\n  // timeZoneOffset\n  if (\n    propertyExists(\n      \"timeZoneOffset\",\n      true,\n      \"the time zone offset from UTC of your hackathon\"\n    )\n  ) {\n    const timeZoneOffsetParsed = timeZoneOffsetParser(config.timeZoneOffset);\n    if (typeof timeZoneOffsetParsed === \"number\") {\n      configSchema.timeZoneOffset = timeZoneOffsetParsed;\n    } else {\n      errors.push({\n        document: \"config.json\",\n        property: \"timeZoneOffset\",\n        type: \"error\",\n        error: timeZoneOffsetParsed[0],\n        toFix: timeZoneOffsetParsed[1],\n      });\n    }\n  }\n\n  // timeZoneOffset\n  if (\n    propertyExists(\n      \"brandingColor\",\n      false,\n      \"the main branding color of your hackathon\"\n    )\n  ) {\n    const brandingColorParsed = brandingColorParser(config.brandingColor);\n    if (typeof brandingColorParsed === \"string\") {\n      configSchema.brandingColor = brandingColorParsed;\n    } else {\n      errors.push({\n        document: \"config.json\",\n        property: \"brandingColor\",\n        type: \"error\",\n        error: brandingColorParsed[0],\n        toFix: brandingColorParsed[1],\n      });\n    }\n\n    // tabs\n    if (\n      propertyExists(\n        \"tabs\",\n        false,\n        \"a boolean representing if tabs or a single scrolling page should be used to seperate sections. If no value is provided, the site is layed out as a single scrolling page\"\n      )\n    ) {\n      configSchema.tabs = config.tabs;\n    }\n  }\n\n  return [configSchema, errors];\n};\n","const unableToParseErrorMessage = \"Unable to parse brandingColor.\";\n\nexport const brandingColorParser = (brandingColor: any): string | string[] => {\n  if (typeof brandingColor === \"string\") {\n    if (brandingColor.match(/^#([0-9a-f]{3}){1,2}$/i)) {\n      // Hex Color Code\n      return brandingColor;\n    } else {\n      // TODO: Add support for Material Colors\n      return [\n        `${unableToParseErrorMessage} brandingColor does not appear to be a hex color code.`,\n        \"Support for Material Colors is coming soon. In the mean time, you can get the hex code of a material color at https://material.io/design/color/the-color-system.\",\n      ];\n    }\n  } else {\n    return [unableToParseErrorMessage];\n  }\n};\n","import { Schema } from \"../../@Types\";\nimport { parseConfigJson } from \"./parseConfigJson\";\nimport { parseEventsJson } from \"./parseEventsJson\";\nimport { parseLinksJson } from \"./parseLinksJson\";\nimport { parsePrizesJson } from \"./parsePrizesJson\";\nimport { parseResourcesJson } from \"./parseResourcesJson\";\nimport { parseStagesJson } from \"./parseStagesJson\";\n\nlet schema: Schema | null = null;\n\nexport const getConfig = (): Schema => {\n  if (!schema) {\n    schema = readSchema();\n  }\n  return schema;\n};\n\nconst readSchema = (): Schema => {\n  const [config, configErrors] = parseConfigJson();\n  const [stages, stageErrors] = parseStagesJson(config.timeZoneOffset);\n  const [events, eventErrors] = parseEventsJson(config.timeZoneOffset);\n  const [prizes, prizeErrors] = parsePrizesJson();\n  const [resources, resourceErrors] = parseResourcesJson();\n  const [links, linkErrors] = parseLinksJson();\n  return {\n    config,\n    stages,\n    events,\n    prizes,\n    resources,\n    links,\n    errors: configErrors.concat(\n      stageErrors,\n      eventErrors,\n      prizeErrors,\n      resourceErrors,\n      linkErrors\n    ),\n  };\n};\n","import { SchemaError, StageSchema } from \"../../@Types\";\nimport stagesJson from \"../Data/stages.json\";\nimport { propertyExistsFactory } from \"./parseHelpers\";\nimport { correctTimezones } from \"./timeZoneHelpers\";\n\nexport const parseStagesJson = (\n  schemaTimeZoneOffset: number\n): [StageSchema[], SchemaError[]] => {\n  const stages: { [key: string]: any } = stagesJson;\n  const errors: SchemaError[] = [];\n  const propertyExists = propertyExistsFactory(stages, \"stages.json\", errors);\n  const stageSchemas: StageSchema[] = [];\n\n  // stages\n  if (\n    propertyExists(\n      \"stages\",\n      false,\n      \"the various stages of your hackathon. For reference, check out https://github.com/andrewdimmer/single-source/blob/main/docs/dataStructure.md#stagesjson\"\n    )\n  ) {\n    if (Array.isArray(stages.stages)) {\n      // stages is a valid array, start checking each stage\n      stages.stages.map((currentStage, index) => {\n        // Verify that all of the required stage properties exist\n        const propertyExistsInStage = propertyExistsFactory(\n          currentStage,\n          \"stages.json\",\n          errors,\n          `stages[${index}]`\n        );\n        const hasStageName = propertyExistsInStage(\n          \"stageName\",\n          true,\n          \"the name of the stage. For reference, check out https://github.com/andrewdimmer/single-source/blob/main/docs/dataStructure.md#stagesjson\"\n        );\n        const hasEndTime = propertyExistsInStage(\n          \"endTime\",\n          true,\n          \"the end time of the stage as an ISO timestamp. For reference, check out https://github.com/andrewdimmer/single-source/blob/main/docs/dataStructure.md#stagesjson\"\n        );\n\n        if (hasStageName && hasEndTime) {\n          // stage object has all required properties, check data\n          const stageSchema: StageSchema = {\n            stageName: \"\",\n            endTime: new Date(),\n          };\n\n          // Validate stageName\n          if (typeof currentStage.stageName === \"string\") {\n            // stageName is a valid string\n            stageSchema.stageName = currentStage.stageName;\n          } else {\n            try {\n              // stageName can be converted to a string\n              stageSchema.stageName = currentStage.stageName.toString();\n              errors.push({\n                document: \"stages.json\",\n                property: `stages[${index}].stageName`,\n                type: \"warning\",\n                error: `stages[${index}].stageName is not a string.`,\n                toFix:\n                  \"In most cases, just make sure your stage name has quotes around it.\",\n              });\n            } catch {\n              // stageName cannot be converted to a string\n              errors.push({\n                document: \"stages.json\",\n                property: `stages[${index}].stageName`,\n                type: \"error\",\n                error: `stages[${index}].stageName is not a string.`,\n              });\n            }\n          }\n\n          // Validate endTime\n          if (typeof currentStage.endTime === \"string\") {\n            stageSchema.endTime = correctTimezones(\n              new Date(currentStage.endTime),\n              schemaTimeZoneOffset\n            );\n            if (isNaN(stageSchema.endTime.valueOf())) {\n              // endTime cannot be parsed as a date!\n              errors.push({\n                document: \"stages.json\",\n                property: `stages[${index}].endTime`,\n                type: \"error\",\n                error: `stages[${index}].endTime is not valid date.`,\n              });\n            } else if (stageSchema.stageName) {\n              // Both stageName and endTime are valid, push the object to stageSchemas\n              stageSchemas.push(stageSchema);\n            }\n          } else {\n            // endTime is not a valid string, therefore it cannot be parsed!\n            errors.push({\n              document: \"stages.json\",\n              property: `stages[${index}].endTime`,\n              type: \"error\",\n              error: `stages[${index}].endTime is not a string.`,\n            });\n          }\n        }\n        return null;\n      });\n    } else {\n      // stages is not an array\n      errors.push({\n        document: \"stages.json\",\n        property: \"stages\",\n        type: \"error\",\n        error: \"stages is not an array.\",\n        toFix:\n          \"For reference, check out https://github.com/andrewdimmer/single-source/blob/main/docs/dataStructure.md#stagesjson.\",\n      });\n    }\n  }\n\n  return [stageSchemas, errors];\n};\n","import { EventSchema, SchemaError } from \"../../@Types\";\nimport eventsJson from \"../Data/events.json\";\nimport { propertyExistsFactory, warnIfNotLinkFactory } from \"./parseHelpers\";\nimport { correctTimezones } from \"./timeZoneHelpers\";\n\nexport const parseEventsJson = (\n  schemaTimeZoneOffset: number\n): [EventSchema[], SchemaError[]] => {\n  const events: { [key: string]: any } = eventsJson;\n  const errors: SchemaError[] = [];\n  const propertyExists = propertyExistsFactory(events, \"events.json\", errors);\n  const eventSchemas: EventSchema[] = [];\n\n  // events\n  if (\n    propertyExists(\n      \"events\",\n      false,\n      \"the various events of your hackathon. For reference, check out https://github.com/andrewdimmer/single-source/blob/main/docs/dataStructure.md#eventsjson\"\n    )\n  ) {\n    if (Array.isArray(events.events)) {\n      // events is a valid array, start checking each event\n      events.events.map((currentEvent, index) => {\n        // Verify that all of the required event properties exist\n        const propertyExistsInEvent = propertyExistsFactory(\n          currentEvent,\n          \"events.json\",\n          errors,\n          `events[${index}]`\n        );\n        const warnIfNotLink = warnIfNotLinkFactory(\n          currentEvent,\n          \"events.json\",\n          errors,\n          `events[${index}]`\n        );\n        const hasEventName = propertyExistsInEvent(\n          \"eventName\",\n          true,\n          \"the name of the event. For reference, check out https://github.com/andrewdimmer/single-source/blob/main/docs/dataStructure.md#eventsjson\"\n        );\n        const hasStartTime = propertyExistsInEvent(\n          \"startTime\",\n          true,\n          \"the start time of the event as an ISO timestamp. For reference, check out https://github.com/andrewdimmer/single-source/blob/main/docs/dataStructure.md#eventsjson\"\n        );\n        const hasEndTime = propertyExistsInEvent(\n          \"endTime\",\n          true,\n          \"the end time of the event as an ISO timestamp. For reference, check out https://github.com/andrewdimmer/single-source/blob/main/docs/dataStructure.md#eventsjson\"\n        );\n        const hasEventDescription = propertyExistsInEvent(\n          \"eventDescription\",\n          true,\n          \"a description of the event. For reference, check out https://github.com/andrewdimmer/single-source/blob/main/docs/dataStructure.md#eventsjson\"\n        );\n        const hasType = propertyExistsInEvent(\n          \"type\",\n          true,\n          \"the type of event. For reference, check out https://github.com/andrewdimmer/single-source/blob/main/docs/dataStructure.md#eventsjson\"\n        );\n\n        if (\n          hasEventName &&\n          hasStartTime &&\n          hasEndTime &&\n          hasEventDescription &&\n          hasType\n        ) {\n          // event object has all required properties, check data\n          const eventSchema: EventSchema = {\n            eventName: \"\",\n            speakers: [],\n            startTime: new Date(),\n            endTime: new Date(),\n            eventDescription: \"\",\n            icon: \"calendar_today\",\n            type: \"\",\n          };\n\n          // Validate eventName\n          if (typeof currentEvent.eventName === \"string\") {\n            // eventName is a valid string\n            eventSchema.eventName = currentEvent.eventName;\n          } else {\n            try {\n              // eventName can be converted to a string\n              eventSchema.eventName = currentEvent.eventName.toString();\n              errors.push({\n                document: \"events.json\",\n                property: `events[${index}].eventName`,\n                type: \"warning\",\n                error: `events[${index}].eventName is not a string.`,\n                toFix:\n                  \"In most cases, just make sure your event name has quotes around it.\",\n              });\n            } catch {\n              // eventName cannot be converted to a string\n              errors.push({\n                document: \"events.json\",\n                property: `events[${index}].eventName`,\n                type: \"error\",\n                error: `events[${index}].eventName is not a string.`,\n              });\n            }\n          }\n\n          // Validate eventDescription\n          if (typeof currentEvent.eventDescription === \"string\") {\n            // eventDescription is a valid string\n            eventSchema.eventDescription = currentEvent.eventDescription;\n          } else {\n            try {\n              // eventDescription can be converted to a string\n              eventSchema.eventDescription = currentEvent.eventDescription.toString();\n              errors.push({\n                document: \"events.json\",\n                property: `events[${index}].eventDescription`,\n                type: \"warning\",\n                error: `events[${index}].eventDescription is not a string.`,\n                toFix:\n                  \"In most cases, just make sure your event description has quotes around it.\",\n              });\n            } catch {\n              // eventDescription cannot be converted to a string\n              errors.push({\n                document: \"events.json\",\n                property: `events[${index}].eventDescription`,\n                type: \"error\",\n                error: `events[${index}].eventDescription is not a string.`,\n              });\n            }\n          }\n\n          // Validate type\n          if (typeof currentEvent.type === \"string\") {\n            // type is a valid string\n            eventSchema.type = currentEvent.type;\n          } else {\n            try {\n              // type can be converted to a string\n              eventSchema.type = currentEvent.type.toString();\n              errors.push({\n                document: \"events.json\",\n                property: `events[${index}].type`,\n                type: \"warning\",\n                error: `events[${index}].type is not a string.`,\n                toFix:\n                  \"In most cases, just make sure your event type has quotes around it.\",\n              });\n            } catch {\n              // type cannot be converted to a string\n              errors.push({\n                document: \"events.json\",\n                property: `events[${index}].type`,\n                type: \"error\",\n                error: `events[${index}].type is not a string.`,\n              });\n            }\n          }\n\n          // Validate startTime\n          if (typeof currentEvent.startTime === \"string\") {\n            eventSchema.startTime = correctTimezones(\n              new Date(currentEvent.startTime),\n              schemaTimeZoneOffset\n            );\n            if (isNaN(eventSchema.startTime.valueOf())) {\n              // startTime cannot be parsed as a date!\n              errors.push({\n                document: \"events.json\",\n                property: `events[${index}].startTime`,\n                type: \"error\",\n                error: `events[${index}].startTime is not valid date.`,\n              });\n            }\n          } else {\n            // startTime is not a valid string, therefore it cannot be parsed!\n            errors.push({\n              document: \"events.json\",\n              property: `events[${index}].startTime`,\n              type: \"error\",\n              error: `events[${index}].startTime is not a string.`,\n            });\n          }\n\n          // Validate endTime\n          if (typeof currentEvent.endTime === \"string\") {\n            eventSchema.endTime = correctTimezones(\n              new Date(currentEvent.endTime),\n              schemaTimeZoneOffset\n            );\n            if (isNaN(eventSchema.endTime.valueOf())) {\n              // endTime cannot be parsed as a date!\n              errors.push({\n                document: \"events.json\",\n                property: `events[${index}].endTime`,\n                type: \"error\",\n                error: `events[${index}].endTime is not valid date.`,\n              });\n            }\n          } else {\n            // endTime is not a valid string, therefore it cannot be parsed!\n            errors.push({\n              document: \"events.json\",\n              property: `events[${index}].endTime`,\n              type: \"error\",\n              error: `events[${index}].endTime is not a string.`,\n            });\n          }\n\n          // location\n          if (\n            propertyExistsInEvent(\n              \"location\",\n              false,\n              \"the location of the event\"\n            )\n          ) {\n            if (typeof currentEvent.location === \"string\") {\n              eventSchema.location = currentEvent.location;\n            } else {\n              try {\n                // location can be converted to a string\n                eventSchema.location = currentEvent.location.toString();\n                errors.push({\n                  document: \"events.json\",\n                  property: \"location\",\n                  type: \"warning\",\n                  error: \"location is not a string.\",\n                  toFix:\n                    \"In most cases, just make sure your event location has quotes around it.\",\n                });\n              } catch {\n                // location cannot be converted to a string\n                errors.push({\n                  document: \"events.json\",\n                  property: \"location\",\n                  type: \"error\",\n                  error: \"location is not a string.\",\n                });\n              }\n            }\n          }\n\n          // joinLink\n          if (\n            propertyExistsInEvent(\n              \"joinLink\",\n              false,\n              \"the link to join the event virtually\"\n            )\n          ) {\n            if (typeof currentEvent.joinLink === \"string\") {\n              eventSchema.joinLink = currentEvent.joinLink;\n              warnIfNotLink(\"joinLink\");\n            } else {\n              // joinLink is not a string, therefore cannot be a link\n              errors.push({\n                document: \"events.json\",\n                property: \"joinLink\",\n                type: \"warning\",\n                error: \"joinLink is not a string\",\n              });\n            }\n          }\n\n          if (\n            eventSchema.eventName &&\n            !isNaN(eventSchema.startTime.valueOf()) &&\n            !isNaN(eventSchema.startTime.valueOf()) &&\n            eventSchema.eventDescription &&\n            eventSchema.type\n          ) {\n            // All required fields are valid.\n            eventSchemas.push(eventSchema);\n          }\n        }\n        return null;\n      });\n    } else {\n      // events is not an array\n      errors.push({\n        document: \"events.json\",\n        property: \"events\",\n        type: \"error\",\n        error: \"events is not an array.\",\n        toFix:\n          \"For reference, check out https://github.com/andrewdimmer/single-source/blob/main/docs/dataStructure.md#eventsjson.\",\n      });\n    }\n  }\n\n  return [eventSchemas, errors];\n};\n","import { PrizeSchema, SchemaError } from \"../../@Types\";\nimport prizesJson from \"../Data/prizes.json\";\nimport { propertyExistsFactory } from \"./parseHelpers\";\n\nexport const parsePrizesJson = (): [PrizeSchema[], SchemaError[]] => {\n  const prizes: { [key: string]: any } = prizesJson;\n  const errors: SchemaError[] = [];\n  const propertyExists = propertyExistsFactory(prizes, \"prizes.json\", errors);\n  const prizeSchemas: PrizeSchema[] = [];\n\n  // prizes\n  if (\n    propertyExists(\n      \"prizes\",\n      false,\n      \"the various prizes you're providing at your hackathon. For reference, check out https://github.com/andrewdimmer/single-source/blob/main/docs/dataStructure.md#prizesjson\"\n    )\n  ) {\n    if (Array.isArray(prizes.prizes)) {\n      // prizes is a valid array, start checking each prize\n      prizes.prizes.map((currentPrize, index) => {\n        // Verify that all of the required prize properties exist\n        const propertyExistsInPrize = propertyExistsFactory(\n          currentPrize,\n          \"prizes.json\",\n          errors,\n          `prizes[${index}]`\n        );\n        /* const warnIfNotLink = warnIfNotLinkFactory(\n          currentPrize,\n          \"prizes.json\",\n          errors,\n          `prizes[${index}]`\n        ); */\n        const hasPrizeName = propertyExistsInPrize(\n          \"prizeName\",\n          true,\n          \"the name of the prize category. For reference, check out https://github.com/andrewdimmer/single-source/blob/main/docs/dataStructure.md#prizesjson\"\n        );\n        const hasPrizeDescription = propertyExistsInPrize(\n          \"prizeDescription\",\n          true,\n          \"a description of the prize category. For reference, check out https://github.com/andrewdimmer/single-source/blob/main/docs/dataStructure.md#prizesjson\"\n        );\n        const hasPrize = propertyExistsInPrize(\n          \"prize\",\n          true,\n          \"the prize itself. For reference, check out https://github.com/andrewdimmer/single-source/blob/main/docs/dataStructure.md#prizesjson\"\n        );\n\n        if (hasPrizeName && hasPrizeDescription && hasPrize) {\n          // prize object has all required properties, check data\n          const prizeSchema: PrizeSchema = {\n            prizeName: \"\",\n            prizeDescription: \"\",\n            prize: \"\",\n          };\n\n          // Validate prizeName\n          if (typeof currentPrize.prizeName === \"string\") {\n            // prizeName is a valid string\n            prizeSchema.prizeName = currentPrize.prizeName;\n          } else {\n            try {\n              // prizeName can be converted to a string\n              prizeSchema.prizeName = currentPrize.prizeName.toString();\n              errors.push({\n                document: \"prizes.json\",\n                property: `prizes[${index}].prizeName`,\n                type: \"warning\",\n                error: `prizes[${index}].prizeName is not a string.`,\n                toFix:\n                  \"In most cases, just make sure your prize name has quotes around it.\",\n              });\n            } catch {\n              // prizeName cannot be converted to a string\n              errors.push({\n                document: \"prizes.json\",\n                property: `prizes[${index}].prizeName`,\n                type: \"error\",\n                error: `prizes[${index}].prizeName is not a string.`,\n              });\n            }\n          }\n\n          // Validate prizeDescription\n          if (typeof currentPrize.prizeDescription === \"string\") {\n            // prizeDescription is a valid string\n            prizeSchema.prizeDescription = currentPrize.prizeDescription;\n          } else {\n            try {\n              // prizeDescription can be converted to a string\n              prizeSchema.prizeDescription = currentPrize.prizeDescription.toString();\n              errors.push({\n                document: \"prizes.json\",\n                property: `prizes[${index}].prizeDescription`,\n                type: \"warning\",\n                error: `prizes[${index}].prizeDescription is not a string.`,\n                toFix:\n                  \"In most cases, just make sure your prize description has quotes around it.\",\n              });\n            } catch {\n              // prizeDescription cannot be converted to a string\n              errors.push({\n                document: \"prizes.json\",\n                property: `prizes[${index}].prizeDescription`,\n                type: \"error\",\n                error: `prizes[${index}].prizeDescription is not a string.`,\n              });\n            }\n          }\n\n          // Validate prize\n          if (typeof currentPrize.prize === \"string\") {\n            // prize is a valid string\n            prizeSchema.prize = currentPrize.prize;\n          } else {\n            try {\n              // prize can be converted to a string\n              prizeSchema.prize = currentPrize.prize.toString();\n              errors.push({\n                document: \"prizes.json\",\n                property: `prizes[${index}].prize`,\n                type: \"warning\",\n                error: `prizes[${index}].prize is not a string.`,\n                toFix:\n                  \"In most cases, just make sure your prize description has quotes around it.\",\n              });\n            } catch {\n              // prize cannot be converted to a string\n              errors.push({\n                document: \"prizes.json\",\n                property: `prizes[${index}].prize`,\n                type: \"error\",\n                error: `prizes[${index}].prize is not a string.`,\n              });\n            }\n          }\n\n          // prizeValue\n          if (\n            propertyExistsInPrize(\"prizeValue\", false, \"the value of the prize\")\n          ) {\n            if (typeof currentPrize.prizeValue === \"string\") {\n              prizeSchema.prizeValue = currentPrize.prizeValue;\n            } else {\n              try {\n                // prizeValue can be converted to a string\n                prizeSchema.prizeValue = currentPrize.prizeValue.toString();\n                errors.push({\n                  document: \"events.json\",\n                  property: \"prizeValue\",\n                  type: \"warning\",\n                  error: \"prizeValue is not a string.\",\n                  toFix:\n                    \"In most cases, just make sure your event prizeValue has quotes around it.\",\n                });\n              } catch {\n                // prizeValue cannot be converted to a string\n                errors.push({\n                  document: \"events.json\",\n                  property: \"prizeValue\",\n                  type: \"error\",\n                  error: \"prizeValue is not a string.\",\n                });\n              }\n            }\n          }\n\n          // prizeSponsor\n          if (\n            propertyExistsInPrize(\n              \"prizeSponsor\",\n              false,\n              \"the sponsor of the prize\"\n            )\n          ) {\n            if (typeof currentPrize.prizeSponsor === \"string\") {\n              prizeSchema.prizeSponsor = currentPrize.prizeSponsor;\n            } else {\n              try {\n                // prizeSponsor can be converted to a string\n                prizeSchema.prizeSponsor = currentPrize.prizeSponsor.toString();\n                errors.push({\n                  document: \"events.json\",\n                  property: \"prizeSponsor\",\n                  type: \"warning\",\n                  error: \"prizeSponsor is not a string.\",\n                  toFix:\n                    \"In most cases, just make sure your event prizeSponsor has quotes around it.\",\n                });\n              } catch {\n                // prizeSponsor cannot be converted to a string\n                errors.push({\n                  document: \"events.json\",\n                  property: \"prizeSponsor\",\n                  type: \"error\",\n                  error: \"prizeSponsor is not a string.\",\n                });\n              }\n            }\n          }\n\n          // eligibility\n          if (\n            propertyExistsInPrize(\n              \"eligibility\",\n              false,\n              \"the eligibility requirements to compete for the prize\"\n            )\n          ) {\n            if (typeof currentPrize.eligibility === \"string\") {\n              prizeSchema.eligibility = currentPrize.eligibility;\n            } else {\n              try {\n                // eligibility can be converted to a string\n                prizeSchema.eligibility = currentPrize.eligibility.toString();\n                errors.push({\n                  document: \"events.json\",\n                  property: \"eligibility\",\n                  type: \"warning\",\n                  error: \"eligibility is not a string.\",\n                  toFix:\n                    \"In most cases, just make sure your event eligibility has quotes around it.\",\n                });\n              } catch {\n                // eligibility cannot be converted to a string\n                errors.push({\n                  document: \"events.json\",\n                  property: \"eligibility\",\n                  type: \"error\",\n                  error: \"eligibility is not a string.\",\n                });\n              }\n            }\n          }\n\n          if (\n            prizeSchema.prizeName &&\n            prizeSchema.prizeDescription &&\n            prizeSchema.prize\n          ) {\n            // All required fields are valid.\n            prizeSchemas.push(prizeSchema);\n          }\n        }\n        return null;\n      });\n    } else {\n      // prizes is not an array\n      errors.push({\n        document: \"prizes.json\",\n        property: \"prizes\",\n        type: \"error\",\n        error: \"prizes is not an array.\",\n        toFix:\n          \"For reference, check out https://github.com/andrewdimmer/single-source/blob/main/docs/dataStructure.md#prizesjson.\",\n      });\n    }\n  }\n\n  return [prizeSchemas, errors];\n};\n","import { ResourceSchema, SchemaError } from \"../../@Types\";\nimport resourcesJson from \"../Data/resources.json\";\nimport { propertyExistsFactory, warnIfNotLinkFactory } from \"./parseHelpers\";\n\nexport const parseResourcesJson = (): [ResourceSchema[], SchemaError[]] => {\n  const resources: { [key: string]: any } = resourcesJson;\n  const errors: SchemaError[] = [];\n  const propertyExists = propertyExistsFactory(\n    resources,\n    \"resources.json\",\n    errors\n  );\n  const resourceSchemas: ResourceSchema[] = [];\n\n  // resources\n  if (\n    propertyExists(\n      \"resources\",\n      false,\n      \"the various resources you're providing at your hackathon. For reference, check out https://github.com/andrewdimmer/single-source/blob/main/docs/dataStructure.md#resourcesjson\"\n    )\n  ) {\n    if (Array.isArray(resources.resources)) {\n      // resources is a valid array, start checking each resource\n      resources.resources.map((currentResource, index) => {\n        // Verify that all of the required resource properties exist\n        const propertyExistsInResource = propertyExistsFactory(\n          currentResource,\n          \"resources.json\",\n          errors,\n          `resources[${index}]`\n        );\n        const warnIfNotLink = warnIfNotLinkFactory(\n          currentResource,\n          \"resources.json\",\n          errors,\n          `resources[${index}]`\n        );\n        const hasResourceName = propertyExistsInResource(\n          \"resourceName\",\n          true,\n          \"the name of the resource. For reference, check out https://github.com/andrewdimmer/single-source/blob/main/docs/dataStructure.md#resourcesjson\"\n        );\n        const hasResourceDescription = propertyExistsInResource(\n          \"resourceDescription\",\n          true,\n          \"a description of the resource. For reference, check out https://github.com/andrewdimmer/single-source/blob/main/docs/dataStructure.md#resourcesjson\"\n        );\n        const hasResourceLink = propertyExistsInResource(\n          \"resourceLink\",\n          true,\n          \"the link to the resource. For reference, check out https://github.com/andrewdimmer/single-source/blob/main/docs/dataStructure.md#resourcesjson\"\n        );\n\n        if (hasResourceName && hasResourceDescription && hasResourceLink) {\n          // resource object has all required properties, check data\n          const resourceSchema: ResourceSchema = {\n            resourceName: \"\",\n            resourceDescription: \"\",\n            resourceLink: \"\",\n          };\n\n          // Validate resourceName\n          if (typeof currentResource.resourceName === \"string\") {\n            // resourceName is a valid string\n            resourceSchema.resourceName = currentResource.resourceName;\n          } else {\n            try {\n              // resourceName can be converted to a string\n              resourceSchema.resourceName = currentResource.resourceName.toString();\n              errors.push({\n                document: \"resources.json\",\n                property: `resources[${index}].resourceName`,\n                type: \"warning\",\n                error: `resources[${index}].resourceName is not a string.`,\n                toFix:\n                  \"In most cases, just make sure your resource name has quotes around it.\",\n              });\n            } catch {\n              // resourceName cannot be converted to a string\n              errors.push({\n                document: \"resources.json\",\n                property: `resources[${index}].resourceName`,\n                type: \"error\",\n                error: `resources[${index}].resourceName is not a string.`,\n              });\n            }\n          }\n\n          // Validate resourceDescription\n          if (typeof currentResource.resourceDescription === \"string\") {\n            // resourceDescription is a valid string\n            resourceSchema.resourceDescription =\n              currentResource.resourceDescription;\n          } else {\n            try {\n              // resourceDescription can be converted to a string\n              resourceSchema.resourceDescription = currentResource.resourceDescription.toString();\n              errors.push({\n                document: \"resources.json\",\n                property: `resources[${index}].resourceDescription`,\n                type: \"warning\",\n                error: `resources[${index}].resourceDescription is not a string.`,\n                toFix:\n                  \"In most cases, just make sure your resource description has quotes around it.\",\n              });\n            } catch {\n              // resourceDescription cannot be converted to a string\n              errors.push({\n                document: \"resources.json\",\n                property: `resources[${index}].resourceDescription`,\n                type: \"error\",\n                error: `resources[${index}].resourceDescription is not a string.`,\n              });\n            }\n          }\n\n          // resourceLink\n          if (typeof currentResource.resourceLink === \"string\") {\n            resourceSchema.resourceLink = currentResource.resourceLink;\n            warnIfNotLink(\"resourceLink\");\n          } else {\n            // resourceLink is not a string, therefore cannot be a link\n            errors.push({\n              document: \"resources.json\",\n              property: \"resourceLink\",\n              type: \"warning\",\n              error: \"resourceLink is not a string\",\n            });\n          }\n\n          // resourceValue\n          if (\n            propertyExistsInResource(\n              \"resourceValue\",\n              false,\n              \"the value of the resource\"\n            )\n          ) {\n            if (typeof currentResource.resourceValue === \"string\") {\n              resourceSchema.resourceValue = currentResource.resourceValue;\n            } else {\n              try {\n                // resourceValue can be converted to a string\n                resourceSchema.resourceValue = currentResource.resourceValue.toString();\n                errors.push({\n                  document: \"events.json\",\n                  property: \"resourceValue\",\n                  type: \"warning\",\n                  error: \"resourceValue is not a string.\",\n                  toFix:\n                    \"In most cases, just make sure your event resourceValue has quotes around it.\",\n                });\n              } catch {\n                // resourceValue cannot be converted to a string\n                errors.push({\n                  document: \"events.json\",\n                  property: \"resourceValue\",\n                  type: \"error\",\n                  error: \"resourceValue is not a string.\",\n                });\n              }\n            }\n          }\n\n          if (\n            resourceSchema.resourceName &&\n            resourceSchema.resourceDescription &&\n            resourceSchema.resourceLink\n          ) {\n            // All required fields are valid.\n            resourceSchemas.push(resourceSchema);\n          }\n        }\n        return null;\n      });\n    } else {\n      // resources is not an array\n      errors.push({\n        document: \"resources.json\",\n        property: \"resources\",\n        type: \"error\",\n        error: \"resources is not an array.\",\n        toFix:\n          \"For reference, check out https://github.com/andrewdimmer/single-source/blob/main/docs/dataStructure.md#resourcesjson.\",\n      });\n    }\n  }\n\n  return [resourceSchemas, errors];\n};\n","import { LinksSchema, SchemaError } from \"../../@Types\";\nimport linksJson from \"../Data/links.json\";\nimport { propertyExistsFactory, warnIfNotLinkFactory } from \"./parseHelpers\";\n\nexport const parseLinksJson = (): [LinksSchema, SchemaError[]] => {\n  const links: { [key: string]: any } = linksJson;\n  const errors: SchemaError[] = [];\n  const propertyExists = propertyExistsFactory(links, \"links.json\", errors);\n  const warnIfNotLink = warnIfNotLinkFactory(links, \"links.json\", errors);\n  const linksSchema: LinksSchema = {\n    codeOfConduct: \"https://static.mlh.io/docs/mlh-code-of-conduct.pdf\",\n  };\n\n  // codeOfConduct\n  if (\n    propertyExists(\n      \"codeOfConduct\",\n      false,\n      \"the code of conduct for your hackathon. In the mean time, this property defaults to the MLH Code of Conduct\"\n    )\n  ) {\n    if (typeof links.codeOfConduct === \"string\") {\n      linksSchema.codeOfConduct = links.codeOfConduct;\n      warnIfNotLink(\"codeOfConduct\");\n    } else {\n      // codeOfConduct is not a string, therefore cannot be a link\n      errors.push({\n        document: \"links.json\",\n        property: \"codeOfConduct\",\n        type: \"warning\",\n        error:\n          \"codeOfConduct is not a string. In the mean time, this property defaults to the MLH Code of Conduct\",\n      });\n    }\n  }\n\n  // joinSlack\n  if (\n    propertyExists(\n      \"joinSlack\",\n      false,\n      \"the join link to the Slack workspace for your hackathon\"\n    )\n  ) {\n    if (typeof links.joinSlack === \"string\") {\n      linksSchema.joinSlack = links.joinSlack;\n      warnIfNotLink(\"joinSlack\");\n    } else {\n      // joinSlack is not a string, therefore cannot be a link\n      errors.push({\n        document: \"links.json\",\n        property: \"joinSlack\",\n        type: \"warning\",\n        error: \"joinSlack is not a string\",\n      });\n    }\n  }\n\n  // slackWorkspace\n  if (\n    propertyExists(\n      \"slackWorkspace\",\n      false,\n      \"the Slack workspace for your hackathon\"\n    )\n  ) {\n    if (typeof links.slackWorkspace === \"string\") {\n      linksSchema.slackWorkspace = links.slackWorkspace;\n      warnIfNotLink(\"slackWorkspace\");\n    } else {\n      // slackWorkspace is not a string, therefore cannot be a link\n      errors.push({\n        document: \"links.json\",\n        property: \"slackWorkspace\",\n        type: \"warning\",\n        error: \"slackWorkspace is not a string\",\n      });\n    }\n  }\n  // discord\n  if (\n    propertyExists(\"discord\", false, \"the Discord server for your hackathon\")\n  ) {\n    if (typeof links.discord === \"string\") {\n      linksSchema.discord = links.discord;\n      warnIfNotLink(\"discord\");\n    } else {\n      // discord is not a string, therefore cannot be a link\n      errors.push({\n        document: \"links.json\",\n        property: \"discord\",\n        type: \"warning\",\n        error: \"discord is not a string\",\n      });\n    }\n  }\n  // facebook\n  if (\n    propertyExists(\"facebook\", false, \"the Facebook page for your hackathon\")\n  ) {\n    if (typeof links.facebook === \"string\") {\n      linksSchema.facebook = links.facebook;\n      warnIfNotLink(\"facebook\");\n    } else {\n      // facebook is not a string, therefore cannot be a link\n      errors.push({\n        document: \"links.json\",\n        property: \"facebook\",\n        type: \"warning\",\n        error: \"facebook is not a string\",\n      });\n    }\n  }\n  // instagram\n  if (\n    propertyExists(\n      \"instagram\",\n      false,\n      \"the Instagram profile for your hackathon\"\n    )\n  ) {\n    if (typeof links.instagram === \"string\") {\n      linksSchema.instagram = links.instagram;\n      warnIfNotLink(\"instagram\");\n    } else {\n      // instagram is not a string, therefore cannot be a link\n      errors.push({\n        document: \"links.json\",\n        property: \"instagram\",\n        type: \"warning\",\n        error: \"instagram is not a string\",\n      });\n    }\n  }\n  // twitter\n  if (\n    propertyExists(\"twitter\", false, \"the Twitter profile for your hackathon\")\n  ) {\n    if (typeof links.twitter === \"string\") {\n      linksSchema.twitter = links.twitter;\n      warnIfNotLink(\"twitter\");\n    } else {\n      // twitter is not a string, therefore cannot be a link\n      errors.push({\n        document: \"links.json\",\n        property: \"twitter\",\n        type: \"warning\",\n        error: \"twitter is not a string\",\n      });\n    }\n  }\n  // linkedin\n  if (\n    propertyExists(\"linkedin\", false, \"the LinkedIn page for your hackathon\")\n  ) {\n    if (typeof links.linkedin === \"string\") {\n      linksSchema.linkedin = links.linkedin;\n      warnIfNotLink(\"linkedin\");\n    } else {\n      // linkedin is not a string, therefore cannot be a link\n      errors.push({\n        document: \"links.json\",\n        property: \"linkedin\",\n        type: \"warning\",\n        error: \"linkedin is not a string\",\n      });\n    }\n  }\n  // twitch\n  if (propertyExists(\"twitch\", false, \"the Twitch stream for your hackathon\")) {\n    if (typeof links.twitch === \"string\") {\n      linksSchema.twitch = links.twitch;\n      warnIfNotLink(\"twitch\");\n    } else {\n      // twitch is not a string, therefore cannot be a link\n      errors.push({\n        document: \"links.json\",\n        property: \"twitch\",\n        type: \"warning\",\n        error: \"twitch is not a string\",\n      });\n    }\n  }\n  // youtube\n  if (\n    propertyExists(\"youtube\", false, \"the YouTube channel for your hackathon\")\n  ) {\n    if (typeof links.youtube === \"string\") {\n      linksSchema.youtube = links.youtube;\n      warnIfNotLink(\"youtube\");\n    } else {\n      // youtube is not a string, therefore cannot be a link\n      errors.push({\n        document: \"links.json\",\n        property: \"youtube\",\n        type: \"warning\",\n        error: \"youtube is not a string\",\n      });\n    }\n  }\n  // devpost\n  if (propertyExists(\"devpost\", false, \"the Devpost for your hackathon\")) {\n    if (typeof links.devpost === \"string\") {\n      linksSchema.devpost = links.devpost;\n      warnIfNotLink(\"devpost\");\n    } else {\n      // devpost is not a string, therefore cannot be a link\n      errors.push({\n        document: \"links.json\",\n        property: \"devpost\",\n        type: \"warning\",\n        error: \"devpost is not a string\",\n      });\n    }\n  }\n  // website\n  if (propertyExists(\"website\", false, \"the main website for your hackathon\")) {\n    if (typeof links.website === \"string\") {\n      linksSchema.website = links.website;\n      warnIfNotLink(\"website\");\n    } else {\n      // website is not a string, therefore cannot be a link\n      errors.push({\n        document: \"links.json\",\n        property: \"website\",\n        type: \"warning\",\n        error: \"website is not a string\",\n      });\n    }\n  }\n\n  return [linksSchema, errors];\n};\n","import { createMuiTheme } from \"@material-ui/core\";\nimport { getConfig } from \"../Scripts/getConfig\";\n\nconst config = getConfig();\n\nexport const lightTheme = createMuiTheme({\n  palette: {\n    primary:\n      typeof config.config.brandingColor === \"string\"\n        ? { main: config.config.brandingColor }\n        : undefined,\n    secondary: undefined,\n    success: undefined,\n    error: undefined,\n    info: undefined,\n    warning: undefined,\n  },\n});\n\nexport const darkTheme = createMuiTheme({\n  palette: {\n    type: \"dark\",\n    primary:\n      typeof config.config.brandingColor === \"string\"\n        ? { main: config.config.brandingColor }\n        : undefined,\n    secondary: undefined,\n    success: undefined,\n    error: undefined,\n    info: undefined,\n    warning: undefined,\n  },\n});\n","import { makeStyles, createStyles } from \"@material-ui/styles\";\nimport { Theme } from \"@material-ui/core\";\nimport { lightTheme as light, darkTheme as dark } from \"./theme\";\n\nexport const styles = makeStyles((theme: Theme) =>\n  createStyles({\n    padded: {\n      padding: theme.spacing(2),\n    },\n    margined: {\n      margin: theme.spacing(2),\n    },\n    marginedTopBottom: {\n      marginTop: theme.spacing(2),\n      marginBottom: theme.spacing(2),\n    },\n    marginedPadded: {\n      margin: theme.spacing(2),\n      padding: theme.spacing(2),\n    },\n    marginRight: {\n      marginRight: theme.spacing(2),\n    },\n    marginsAuto: {\n      margin: \"auto\",\n    },\n    centerText: {\n      textAlign: \"center\",\n    },\n    pageTitle: {\n      padding: theme.spacing(2),\n      textAlign: \"center\",\n    },\n    infoColor: {\n      color: \"#FFFFFF\",\n      backgroundColor: theme.palette.info.main,\n    },\n    warningColor: {\n      color: \"#FFFFFF\",\n      backgroundColor: theme.palette.warning.main,\n    },\n    errorColor: {\n      color: \"#FFFFFF\",\n      backgroundColor: theme.palette.error.main,\n    },\n    brandingColor: {\n      color: theme.palette.getContrastText(theme.palette.primary.main),\n      backgroundColor: theme.palette.primary.main,\n    },\n    fab: {\n      position: \"fixed\",\n      bottom: \"0px\",\n      right: \"0px\",\n      margin: theme.spacing(2),\n    },\n    stageTimerNumberCard: {\n      padding: theme.spacing(2),\n      textAlign: \"center\",\n      backgroundColor: theme.palette.primary.main,\n      color: theme.palette.getContrastText(theme.palette.primary.main),\n    },\n  })\n);\n\nexport const lightTheme = light;\nexport const darkTheme = dark;\n","import { SchemaError, SchemaErrorType } from \"../../@Types\";\n\nexport const filterErrorsByType = (\n  errors: SchemaError[],\n  type: SchemaErrorType\n) => {\n  return errors.reduce((output, currentError) => {\n    if (currentError.type === type) {\n      output.push(currentError);\n    }\n    return output;\n  }, [] as SchemaError[]);\n};\n","import {\n  Avatar,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  Typography,\n} from \"@material-ui/core\";\nimport ErrorIcon from \"@material-ui/icons/Error\";\nimport InfoIcon from \"@material-ui/icons/Info\";\nimport WarningIcon from \"@material-ui/icons/Warning\";\nimport React, { Fragment } from \"react\";\nimport { SchemaError } from \"../../../../@Types\";\n\ndeclare interface ErrorInfoProps {\n  error: SchemaError;\n  classes: any;\n}\n\nconst ErrorInfo: React.FunctionComponent<ErrorInfoProps> = ({\n  error,\n  classes,\n}) => {\n  return (\n    <ListItem alignItems=\"flex-start\">\n      <ListItemAvatar>\n        {error.type === \"error\" ? (\n          <Avatar className={classes.errorColor}>\n            <ErrorIcon />\n          </Avatar>\n        ) : error.type === \"warning\" ? (\n          <Avatar className={classes.warningColor}>\n            <WarningIcon />\n          </Avatar>\n        ) : (\n          <Avatar className={classes.infoColor}>\n            <InfoIcon />\n          </Avatar>\n        )}\n      </ListItemAvatar>\n      <ListItemText\n        primary={error.error}\n        secondary={\n          <Fragment>\n            <Typography variant=\"body1\" component=\"span\">\n              {error.toFix}\n            </Typography>\n            {error.toFix && <br />}\n            {`${error.document} : ${error.property}`}\n          </Fragment>\n        }\n      />\n      {/** TODO: Add toFixLinks support **/}\n    </ListItem>\n  );\n};\n\nexport default ErrorInfo;\n","import { Container, List, Typography } from \"@material-ui/core\";\nimport React, { Fragment } from \"react\";\nimport { Schema } from \"../../../../@Types\";\nimport { filterErrorsByType } from \"../../../Scripts/filterErrorsByType\";\nimport ErrorInfo from \"./ErrorInfo\";\n\ndeclare interface DebugMainProps {\n  config: Schema;\n  classes: any;\n}\n\nconst DebugMain: React.FunctionComponent<DebugMainProps> = ({\n  config,\n  classes,\n}) => {\n  return (\n    <Fragment>\n      <Container className={classes.pageTitle}>\n        <Typography variant=\"h4\">Debug Mode Enabled</Typography>\n      </Container>\n      <Typography variant=\"body1\">\n        This section contains helpful information regarding your configuation.\n        It is only displayed when viewing this page from localhost. To close\n        debug mode, click the bug icon in the lower right-hand corner.\n      </Typography>\n\n      <Container className={classes.pageTitle}>\n        <Typography variant=\"h5\">Schema Time Zone</Typography>\n        <Typography variant=\"body1\">\n          {config.config.timeZoneOffset} hour offest from UTC.\n        </Typography>\n      </Container>\n      <Container className={classes.pageTitle}>\n        <Typography variant=\"h5\">\n          Errors, Warnings, and Info from Parsing Data\n        </Typography>\n      </Container>\n      <List>\n        {filterErrorsByType(config.errors, \"error\").map((error, index) => {\n          return (\n            <ErrorInfo error={error} key={`error_${index}`} classes={classes} />\n          );\n        })}\n        {filterErrorsByType(config.errors, \"warning\").map((error, index) => {\n          return (\n            <ErrorInfo\n              error={error}\n              key={`warning_${index}`}\n              classes={classes}\n            />\n          );\n        })}\n        {filterErrorsByType(config.errors, \"info\").map((error, index) => {\n          return (\n            <ErrorInfo error={error} key={`info_${index}`} classes={classes} />\n          );\n        })}\n      </List>\n    </Fragment>\n  );\n};\n\nexport default DebugMain;\n","import { Button, Typography } from \"@material-ui/core\";\nimport React from \"react\";\n\ndeclare interface LinkButtonProps {\n  title: string;\n  link: string;\n  icon: any;\n  classes: any;\n}\n\nconst LinkButton: React.FunctionComponent<LinkButtonProps> = ({\n  title,\n  link,\n  icon,\n  classes,\n}) => {\n  return (\n    <Button\n      color=\"primary\"\n      fullWidth\n      variant=\"contained\"\n      onClick={() => {\n        window.open(link, \"_blank\");\n      }}\n      startIcon={icon}\n    >\n      <Typography variant=\"h6\">{title}</Typography>\n    </Button>\n  );\n};\n\nexport default LinkButton;\n","import { Container, Typography, Grid } from \"@material-ui/core\";\nimport WebIcon from \"@material-ui/icons/Web\";\nimport React, { Fragment } from \"react\";\nimport { LinksSchema } from \"../../../../@Types\";\nimport LinkButton from \"./LinkButton\";\nimport QuestionAnswerIcon from \"@material-ui/icons/QuestionAnswer\";\nimport AddCommentIcon from \"@material-ui/icons/AddComment\";\nimport AssignmentIcon from \"@material-ui/icons/Assignment\";\nimport OndemandVideoIcon from \"@material-ui/icons/OndemandVideo\";\nimport BookIcon from \"@material-ui/icons/Book\";\nimport YouTubeIcon from \"@material-ui/icons/YouTube\";\nimport FacebookIcon from \"@material-ui/icons/Facebook\";\nimport InstagramIcon from \"@material-ui/icons/Instagram\";\nimport TwitterIcon from \"@material-ui/icons/Twitter\";\nimport LinkedInIcon from \"@material-ui/icons/LinkedIn\";\n\ndeclare interface LinksMainProps {\n  links: LinksSchema;\n  classes: any;\n}\n\nconst LinksMain: React.FunctionComponent<LinksMainProps> = ({\n  links,\n  classes,\n}) => {\n  return (\n    <Fragment>\n      <Container className={classes.pageTitle}>\n        <Typography variant=\"h4\">Important Links</Typography>\n      </Container>\n\n      <Typography variant=\"h5\" className={classes.centerText}>\n        General Info and Submissions\n      </Typography>\n      <Grid container spacing={2} className={classes.marginedTopBottom}>\n        {links.website && (\n          <Grid item xs>\n            <LinkButton\n              title=\"Website\"\n              link={links.website}\n              icon={<WebIcon />}\n              classes={classes}\n            />\n          </Grid>\n        )}\n        {links.devpost && (\n          <Grid item xs>\n            <LinkButton\n              title=\"Devpost\"\n              link={links.devpost}\n              icon={<AssignmentIcon />}\n              classes={classes}\n            />\n          </Grid>\n        )}\n        {links.codeOfConduct && (\n          <Grid item xs>\n            <LinkButton\n              title=\"Code of Conduct\"\n              link={links.codeOfConduct}\n              icon={<BookIcon />}\n              classes={classes}\n            />\n          </Grid>\n        )}\n      </Grid>\n\n      {(links.joinSlack ||\n        links.slackWorkspace ||\n        links.discord ||\n        links.twitch ||\n        links.youtube) && (\n        <Fragment>\n          <Typography variant=\"h5\" className={classes.centerText}>\n            Communications and Streaming\n          </Typography>\n          <Grid container spacing={2} className={classes.marginedTopBottom}>\n            {links.joinSlack && (\n              <Grid item xs>\n                <LinkButton\n                  title=\"Join Slack\"\n                  link={links.joinSlack}\n                  icon={<AddCommentIcon />}\n                  classes={classes}\n                />\n              </Grid>\n            )}\n            {links.slackWorkspace && (\n              <Grid item xs>\n                <LinkButton\n                  title=\"Slack Workspace\"\n                  link={links.slackWorkspace}\n                  icon={<QuestionAnswerIcon />}\n                  classes={classes}\n                />\n              </Grid>\n            )}\n            {links.discord && (\n              <Grid item xs>\n                <LinkButton\n                  title=\"Discord\"\n                  link={links.discord}\n                  icon={<QuestionAnswerIcon />}\n                  classes={classes}\n                />\n              </Grid>\n            )}\n            {links.twitch && (\n              <Grid item xs>\n                <LinkButton\n                  title=\"Twitch\"\n                  link={links.twitch}\n                  icon={<OndemandVideoIcon />}\n                  classes={classes}\n                />\n              </Grid>\n            )}\n            {links.youtube && (\n              <Grid item xs>\n                <LinkButton\n                  title=\"YouTube\"\n                  link={links.youtube}\n                  icon={<YouTubeIcon />}\n                  classes={classes}\n                />\n              </Grid>\n            )}\n          </Grid>\n        </Fragment>\n      )}\n\n      {(links.facebook ||\n        links.instagram ||\n        links.twitter ||\n        links.linkedin) && (\n        <Fragment>\n          <Typography variant=\"h5\" className={classes.centerText}>\n            Social Media\n          </Typography>\n          <Grid container spacing={2} className={classes.marginedTopBottom}>\n            {links.facebook && (\n              <Grid item xs>\n                <LinkButton\n                  title=\"Facebook\"\n                  link={links.facebook}\n                  icon={<FacebookIcon />}\n                  classes={classes}\n                />\n              </Grid>\n            )}\n            {links.instagram && (\n              <Grid item xs>\n                <LinkButton\n                  title=\"Instagram\"\n                  link={links.instagram}\n                  icon={<InstagramIcon />}\n                  classes={classes}\n                />\n              </Grid>\n            )}\n            {links.twitter && (\n              <Grid item xs>\n                <LinkButton\n                  title=\"Twitter\"\n                  link={links.twitter}\n                  icon={<TwitterIcon />}\n                  classes={classes}\n                />\n              </Grid>\n            )}\n            {links.linkedin && (\n              <Grid item xs>\n                <LinkButton\n                  title=\"LinkedIn\"\n                  link={links.linkedin}\n                  icon={<LinkedInIcon />}\n                  classes={classes}\n                />\n              </Grid>\n            )}\n          </Grid>\n        </Fragment>\n      )}\n\n      {links.otherLinks && (\n        <Fragment>\n          <Typography variant=\"h5\" className={classes.centerText}>\n            Other Links\n          </Typography>\n        </Fragment>\n      )}\n    </Fragment>\n  );\n};\n\nexport default LinksMain;\n","import { Card, Typography } from \"@material-ui/core\";\nimport React from \"react\";\n\ndeclare interface StageTimerNumberProps {\n  label: string;\n  classes: any;\n}\n\nconst StageTimerNumber: React.FunctionComponent<StageTimerNumberProps> = ({\n  children,\n  label,\n  classes,\n}) => {\n  return (\n    <Card className={classes.stageTimerNumberCard}>\n      <Typography variant=\"h2\">{children}</Typography>\n      <Typography variant=\"h6\">{label}</Typography>\n    </Card>\n  );\n};\n\nexport default StageTimerNumber;\n","import { Grid } from \"@material-ui/core\";\nimport React from \"react\";\nimport Timer from \"react-compound-timer\";\nimport StageTimerNumber from \"./StageTimerNumber\";\n\ndeclare interface StageTimerProps {\n  valueOfEndTime: number;\n  nextStage: () => void;\n  classes: any;\n}\n\nconst StageTimer: React.FunctionComponent<StageTimerProps> = ({\n  valueOfEndTime,\n  nextStage,\n  classes,\n}) => {\n  return (\n    <Timer\n      initialTime={valueOfEndTime - new Date().valueOf()}\n      direction=\"backward\"\n      checkpoints={[\n        {\n          time: 0,\n          callback: () => {\n            // Note: The timer does not reinitialize when calling nextStage,\n            // so instead the page is refreshed.\n            // FIXME: Figueout how to change the timer value without a refresh...\n            window.location.reload();\n          },\n        },\n      ]}\n    >\n      <Grid\n        container\n        direction=\"row\"\n        justify=\"center\"\n        alignItems=\"center\"\n        spacing={2}\n      >\n        <Grid item xs={3}>\n          <StageTimerNumber label=\"days\" classes={classes}>\n            <Timer.Days />\n          </StageTimerNumber>\n        </Grid>\n        <Grid item xs={3}>\n          <StageTimerNumber label=\"hours\" classes={classes}>\n            <Timer.Hours />\n          </StageTimerNumber>\n        </Grid>\n        <Grid item xs={3}>\n          <StageTimerNumber label=\"minutes\" classes={classes}>\n            <Timer.Minutes />\n          </StageTimerNumber>\n        </Grid>\n        <Grid item xs={3}>\n          <StageTimerNumber label=\"seconds\" classes={classes}>\n            <Timer.Seconds />\n          </StageTimerNumber>\n        </Grid>\n      </Grid>\n    </Timer>\n  );\n};\n\nexport default StageTimer;\n","import { Container, Typography } from \"@material-ui/core\";\nimport React, { Fragment } from \"react\";\nimport { StageSchema } from \"../../../../@Types\";\nimport StageTimer from \"./StageTimer\";\n\ndeclare interface StagesMainProps {\n  stages: StageSchema[];\n  classes: any;\n}\n\nconst StagesMain: React.FunctionComponent<StagesMainProps> = ({\n  stages,\n  classes,\n}) => {\n  const findCurrentStage = () => {\n    const currentTime = new Date();\n    for (const stage of stages) {\n      if (currentTime < stage.endTime) {\n        return stage;\n      }\n    }\n    // The last stage has already ended; there are now more upcoming.\n    return undefined;\n  };\n\n  const [currentStage, setCurrentStage] = React.useState<\n    StageSchema | undefined\n  >(findCurrentStage());\n\n  return currentStage ? (\n    <Fragment>\n      <Container className={classes.pageTitle}>\n        <Typography variant=\"h4\">{currentStage.stageName} in </Typography>\n      </Container>\n      <StageTimer\n        valueOfEndTime={currentStage.endTime.valueOf()}\n        nextStage={() => setCurrentStage(findCurrentStage())}\n        classes={classes}\n      />\n    </Fragment>\n  ) : (\n    <Fragment />\n  );\n};\n\nexport default StagesMain;\n","import {\n  AppBar,\n  createStyles,\n  IconButton,\n  makeStyles,\n  Theme,\n  Toolbar,\n  Typography,\n} from \"@material-ui/core\";\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\nimport Brightness4Icon from \"@material-ui/icons/Brightness4\";\nimport Brightness7Icon from \"@material-ui/icons/Brightness7\";\nimport React from \"react\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n    },\n  })\n);\n\ndeclare interface NavBarProps {\n  theme: \"light\" | \"dark\";\n  toggleTheme: () => void;\n  pageTitle: string;\n  mainWebsiteUrl?: string;\n}\n\nconst NavBar: React.FunctionComponent<NavBarProps> = ({\n  theme,\n  toggleTheme,\n  pageTitle,\n  mainWebsiteUrl,\n}) => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          {mainWebsiteUrl && (\n            <IconButton\n              edge=\"start\"\n              className={classes.menuButton}\n              color=\"inherit\"\n              aria-label=\"back\"\n              onClick={() => {\n                window.open(mainWebsiteUrl);\n              }}\n            >\n              <ArrowBackIcon />\n            </IconButton>\n          )}\n          <Typography variant=\"h6\" className={classes.title}>\n            {pageTitle ? `${pageTitle} - ` : \"\"}Live\n          </Typography>\n\n          <div>\n            <IconButton\n              aria-label=\"Toggle light/dark theme\"\n              aria-controls=\"menu-appbar\"\n              aria-haspopup=\"true\"\n              onClick={toggleTheme}\n              color=\"inherit\"\n            >\n              {theme === \"dark\" ? <Brightness7Icon /> : <Brightness4Icon />}\n            </IconButton>\n          </div>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n};\n\nexport default NavBar;\n","import {\n  Avatar,\n  Button,\n  Container,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  Typography,\n} from \"@material-ui/core\";\nimport CalendarTodayIcon from \"@material-ui/icons/CalendarToday\";\nimport React, { Fragment } from \"react\";\nimport { EventSchema } from \"../../../../@Types\";\n\ndeclare interface EventInfoProps {\n  event: EventSchema;\n  currentTimeMilliseconds: number;\n  classes: any;\n}\n\nconst EventInfo: React.FunctionComponent<EventInfoProps> = ({\n  event,\n  currentTimeMilliseconds,\n  classes,\n}) => {\n  return (\n    <ListItem alignItems=\"flex-start\">\n      <ListItemAvatar>\n        <Avatar className={classes.brandingColor}>\n          <CalendarTodayIcon />\n        </Avatar>\n      </ListItemAvatar>\n      <ListItemText\n        primary={`[${event.type}]: ${event.eventName}`}\n        secondary={\n          <Fragment>\n            <Typography variant=\"body1\" component=\"span\">\n              {event.startTime.toLocaleTimeString()} -{\" \"}\n              {event.startTime.toLocaleDateString() ===\n              event.endTime.toLocaleDateString()\n                ? event.endTime.toLocaleTimeString()\n                : event.endTime.toLocaleString()}{\" \"}\n              {event.location ? \"|\" : \"\"} {event.location}\n            </Typography>\n            <br />\n            {event.eventDescription}\n            {event.joinLink &&\n              event.startTime.valueOf() - 60000 * 10 <=\n                currentTimeMilliseconds &&\n              event.endTime.valueOf() >= currentTimeMilliseconds && (\n                <Container className={classes.pageTitle}>\n                  <Button\n                    color=\"primary\"\n                    variant=\"contained\"\n                    onClick={() => {\n                      window.open(event.joinLink, \"_blank\");\n                    }}\n                  >\n                    Join Virtually!\n                  </Button>\n                </Container>\n              )}\n          </Fragment>\n        }\n      />\n      {/** TODO: Add Speakers, Custom Icons, and Custom Colors **/}\n    </ListItem>\n  );\n};\n\nexport default EventInfo;\n","import {\n  Container,\n  FormControlLabel,\n  List,\n  Switch,\n  Typography,\n} from \"@material-ui/core\";\nimport React, { Fragment } from \"react\";\nimport { EventSchema } from \"../../../../@Types\";\nimport { updateCurrentTime } from \"../../../Scripts/timeCounterKey\";\nimport EventInfo from \"./EventInfo\";\n\ndeclare interface EventsMainProps {\n  events: EventSchema[];\n  classes: any;\n}\n\nconst EventsMain: React.FunctionComponent<EventsMainProps> = ({\n  events,\n  classes,\n}) => {\n  const [showPastEvents, setShowPastEvents] = React.useState<boolean>(false);\n  const [currentTimeMilliseconds, setCurrentTimeMilliseconds] = React.useState<\n    number\n  >(0);\n  const [loaded, setLoaded] = React.useState<boolean>(false);\n\n  const binEventsByDate = () => {\n    const binnedEvents: { [key: string]: EventSchema[] } = {};\n    for (const event of events) {\n      if (showPastEvents || event.endTime.getTime() > Date.now()) {\n        const dateString = `${event.startTime.getFullYear()}${event.startTime.getMonth()}${event.startTime.getDate()}`;\n        if (binnedEvents[dateString]) {\n          binnedEvents[dateString].push(event);\n        } else {\n          binnedEvents[dateString] = [event];\n        }\n      }\n    }\n    const binnedEventsArray: EventSchema[][] = [];\n    for (const day in binnedEvents) {\n      binnedEventsArray.push(binnedEvents[day]);\n    }\n    if (binnedEventsArray.length === 0) {\n      const eventPlaceHolder: EventSchema = {\n        eventName: \"No Upcoming Events...\",\n        type: \"No Events\",\n        speakers: [],\n        startTime: new Date(new Date().toDateString()),\n        endTime: (() => {\n          const tempDate = new Date();\n          tempDate.setDate(tempDate.getDate() + 1);\n          const date = new Date(tempDate.toDateString());\n          date.setMilliseconds(date.getMilliseconds() - 1);\n          return date;\n        })(),\n        eventDescription: \"Sorry, but there are no upcoming events...\",\n        icon: \"\",\n        eventColor: \"\",\n      };\n      binnedEventsArray.push([eventPlaceHolder]);\n    }\n    return binnedEventsArray;\n  };\n\n  if (!loaded) {\n    setLoaded(true);\n    updateCurrentTime(Math.random(), setCurrentTimeMilliseconds);\n  }\n\n  return (\n    <Fragment>\n      <Container className={classes.pageTitle}>\n        <Typography variant=\"h4\">Events and Activities</Typography>\n      </Container>\n      <Typography variant=\"body1\">\n        Note: All times are in your local time zone!\n      </Typography>\n      <FormControlLabel\n        control={\n          <Switch\n            checked={showPastEvents}\n            onChange={() => {\n              setShowPastEvents(!showPastEvents);\n            }}\n            name=\"showPastEventsSwitch\"\n            color=\"primary\"\n          />\n        }\n        label=\"Show Past Events\"\n      />\n      {binEventsByDate().map((eventList, dayIndex) => {\n        return (\n          <Fragment key={`day_${dayIndex}`}>\n            <Container className={classes.pageTitle}>\n              <Typography variant=\"h5\">\n                {eventList[0].startTime.toLocaleDateString()}\n              </Typography>\n            </Container>\n            <List>\n              {eventList.map((event, index) => {\n                return (\n                  <EventInfo\n                    key={`event_${index}`}\n                    event={event}\n                    currentTimeMilliseconds={currentTimeMilliseconds}\n                    classes={classes}\n                  />\n                );\n              })}\n            </List>\n          </Fragment>\n        );\n      })}\n\n      {/** TODO: Allow Toggle on/off for showing past events */}\n    </Fragment>\n  );\n};\n\nexport default EventsMain;\n","import {\n  Avatar,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  Typography,\n} from \"@material-ui/core\";\nimport CategoryIcon from \"@material-ui/icons/Category\";\nimport React, { Fragment } from \"react\";\nimport { PrizeSchema } from \"../../../../@Types\";\n\ndeclare interface PrizeInfoProps {\n  prize: PrizeSchema;\n  classes: any;\n}\n\nconst PrizeInfo: React.FunctionComponent<PrizeInfoProps> = ({\n  prize,\n  classes,\n}) => {\n  return (\n    <ListItem alignItems=\"flex-start\">\n      <ListItemAvatar>\n        <Avatar className={classes.brandingColor}>\n          <CategoryIcon />\n        </Avatar>\n      </ListItemAvatar>\n      <ListItemText\n        primary={`${prize.prizeName} ${\n          prize.prizeSponsor ? \"sponsored by \" + prize.prizeSponsor : \"\"\n        }`}\n        secondary={\n          <Fragment>\n            <Typography variant=\"body1\" component=\"span\">\n              {prize.prize}{\" \"}\n              {prize.prizeValue ? `(${prize.prizeValue} value)` : \"\"}\n            </Typography>\n            <br />\n            {prize.prizeDescription}\n            {prize.eligibility && <br />}\n            {prize.eligibility}\n          </Fragment>\n        }\n      />\n    </ListItem>\n  );\n};\n\nexport default PrizeInfo;\n","import { Container, List, Typography } from \"@material-ui/core\";\nimport React, { Fragment } from \"react\";\nimport { PrizeSchema } from \"../../../../@Types\";\nimport PrizeInfo from \"./PrizeInfo\";\n\ndeclare interface PrizesMainProps {\n  prizes: PrizeSchema[];\n  classes: any;\n}\n\nconst PrizesMain: React.FunctionComponent<PrizesMainProps> = ({\n  prizes,\n  classes,\n}) => {\n  return (\n    <Fragment>\n      <Container className={classes.pageTitle}>\n        <Typography variant=\"h4\">Prizes</Typography>\n      </Container>\n      <List>\n        {prizes.map((prize, index) => {\n          return (\n            <PrizeInfo key={`prize_${index}`} prize={prize} classes={classes} />\n          );\n        })}\n      </List>\n    </Fragment>\n  );\n};\n\nexport default PrizesMain;\n","import {\n  Avatar,\n  Fab,\n  ListItem,\n  ListItemAvatar,\n  ListItemSecondaryAction,\n  ListItemText,\n} from \"@material-ui/core\";\nimport BookIcon from \"@material-ui/icons/Book\";\nimport LaunchIcon from \"@material-ui/icons/Launch\";\nimport React from \"react\";\nimport { ResourceSchema } from \"../../../../@Types\";\n\ndeclare interface ResourceInfoProps {\n  resource: ResourceSchema;\n  classes: any;\n}\n\nconst ResourceInfo: React.FunctionComponent<ResourceInfoProps> = ({\n  resource,\n  classes,\n}) => {\n  return (\n    <ListItem alignItems=\"flex-start\">\n      <ListItemAvatar>\n        <Avatar className={classes.brandingColor}>\n          <BookIcon />\n        </Avatar>\n      </ListItemAvatar>\n      <ListItemText\n        primary={`${resource.resourceName} ${\n          resource.resourceValue ? \"(\" + resource.resourceValue + \" value)\" : \"\"\n        }`}\n        secondary={resource.resourceDescription}\n      />\n      <ListItemSecondaryAction>\n        <Fab\n          color=\"primary\"\n          onClick={() => {\n            window.open(resource.resourceLink, \"_blank\");\n          }}\n        >\n          <LaunchIcon />\n        </Fab>\n      </ListItemSecondaryAction>\n    </ListItem>\n  );\n};\n\nexport default ResourceInfo;\n","import { Container, List, Typography } from \"@material-ui/core\";\nimport React, { Fragment } from \"react\";\nimport { ResourceSchema } from \"../../../../@Types\";\nimport ResourceInfo from \"./ResourceInfo\";\n\ndeclare interface ResourcesMainProps {\n  resources: ResourceSchema[];\n  classes: any;\n}\n\nconst ResourcesMain: React.FunctionComponent<ResourcesMainProps> = ({\n  resources,\n  classes,\n}) => {\n  return (\n    <Fragment>\n      <Container className={classes.pageTitle}>\n        <Typography variant=\"h4\">Resources</Typography>\n      </Container>\n      <List>\n        {resources.map((resource, index) => {\n          return (\n            <ResourceInfo\n              key={`resource_${index}`}\n              resource={resource}\n              classes={classes}\n            />\n          );\n        })}\n      </List>\n    </Fragment>\n  );\n};\n\nexport default ResourcesMain;\n","import { Divider } from \"@material-ui/core\";\nimport React, { Fragment } from \"react\";\nimport { Schema } from \"../../../@Types\";\nimport EventsMain from \"../Content/Events/EventsMain\";\nimport PrizesMain from \"../Content/Prizes/PrizesMain\";\nimport ResourcesMain from \"../Content/Resources/ResourcesMain\";\n\ndeclare interface ScrollingSectionsProps {\n  config: Schema;\n  classes: any;\n}\n\nconst ScrollingSections: React.FunctionComponent<ScrollingSectionsProps> = ({\n  config,\n  classes,\n}) => {\n  return (\n    <Fragment>\n      {config.events.length > 0 && (\n        <Fragment>\n          <Divider className={classes.marginedTopBottom} />\n          <EventsMain events={config.events} classes={classes} />\n        </Fragment>\n      )}\n      {config.prizes.length > 0 && (\n        <Fragment>\n          <Divider className={classes.marginedTopBottom} />\n          <PrizesMain prizes={config.prizes} classes={classes} />\n        </Fragment>\n      )}\n      {config.resources.length > 0 && (\n        <Fragment>\n          <Divider className={classes.marginedTopBottom} />\n          <ResourcesMain resources={config.resources} classes={classes} />\n        </Fragment>\n      )}\n      {/** TODO: CONTENT GOES HERE */}\n    </Fragment>\n  );\n};\n\nexport default ScrollingSections;\n","import { AppBar, Box, Divider, Tab, Tabs } from \"@material-ui/core\";\nimport React, { Fragment } from \"react\";\nimport SwipeableViews from \"react-swipeable-views\";\nimport { Schema } from \"../../../@Types\";\nimport EventsMain from \"../Content/Events/EventsMain\";\nimport PrizesMain from \"../Content/Prizes/PrizesMain\";\nimport ResourcesMain from \"../Content/Resources/ResourcesMain\";\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  dir?: string;\n  index: any;\n  value: any;\n}\n\nfunction TabPanel({ children, value, index }: TabPanelProps) {\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`full-width-tabpanel-${index}`}\n      aria-labelledby={`full-width-tab-${index}`}\n    >\n      {value === index && <Box>{children}</Box>}\n    </div>\n  );\n}\n\ndeclare interface TabbedSectionsProps {\n  config: Schema;\n  classes: any;\n}\n\nconst TabbedSections: React.FunctionComponent<TabbedSectionsProps> = ({\n  config,\n  classes,\n}) => {\n  const [currentTab, setCurrentTab] = React.useState(0);\n\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n    setCurrentTab(newValue);\n  };\n\n  const handleChangeIndex = (index: number) => {\n    setCurrentTab(index);\n  };\n\n  const showEvents = config.events.length > 0;\n  const showPrizes = config.prizes.length > 0;\n  const showResources = config.resources.length > 0;\n  /** TODO: CONTENT GOES HERE */\n\n  const tabs = [] as JSX.Element[];\n\n  const generateTabOrder = () => {\n    if (showEvents) {\n      tabs.push(<EventsMain events={config.events} classes={classes} />);\n    }\n    if (showPrizes) {\n      tabs.push(<PrizesMain prizes={config.prizes} classes={classes} />);\n    }\n    if (showResources) {\n      tabs.push(\n        <ResourcesMain resources={config.resources} classes={classes} />\n      );\n    }\n    /** TODO: CONTENT GOES HERE */\n  };\n\n  generateTabOrder();\n\n  return (\n    <Fragment>\n      {tabs.length > 0 && (\n        <Fragment>\n          <Divider className={classes.marginedTopBottom} />\n          <AppBar position=\"static\" color=\"default\">\n            <Tabs\n              value={currentTab}\n              onChange={handleChange}\n              indicatorColor=\"primary\"\n              textColor=\"primary\"\n              variant=\"scrollable\"\n              scrollButtons=\"auto\"\n            >\n              {showEvents && <Tab label=\"Events and Activities\" />}\n              {showPrizes && <Tab label=\"Prizes\" />}\n              {showResources && <Tab label=\"Resources\" />}\n              {/** TODO: CONTENT GOES HERE */}\n            </Tabs>\n          </AppBar>\n\n          <SwipeableViews\n            axis={\"x\"}\n            index={currentTab}\n            onChangeIndex={handleChangeIndex}\n          >\n            {tabs.map((element, index) => {\n              return (\n                <TabPanel value={currentTab} index={index} key={`tab_${index}`}>\n                  {element}\n                </TabPanel>\n              );\n            })}\n          </SwipeableViews>\n        </Fragment>\n      )}\n    </Fragment>\n  );\n};\n\nexport default TabbedSections;\n","import {\n  IconButton,\n  Snackbar,\n  SnackbarContent,\n  Theme\n} from \"@material-ui/core\";\nimport CheckCircleIcon from \"@material-ui/icons/CheckCircle\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport ErrorIcon from \"@material-ui/icons/Error\";\nimport InfoIcon from \"@material-ui/icons/Info\";\nimport WarningIcon from \"@material-ui/icons/Warning\";\nimport { createStyles, makeStyles } from \"@material-ui/styles\";\nimport clsx from \"clsx\";\nimport React, { SyntheticEvent } from \"react\";\n\nconst variantIcon = {\n  success: CheckCircleIcon,\n  warning: WarningIcon,\n  error: ErrorIcon,\n  info: InfoIcon\n};\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    success: {\n      color: theme.palette.getContrastText(theme.palette.success.main),\n      backgroundColor: theme.palette.success.main\n    },\n    error: {\n      color: theme.palette.getContrastText(theme.palette.error.main),\n      backgroundColor: theme.palette.error.main\n    },\n    info: {\n      color: theme.palette.getContrastText(theme.palette.info.main),\n      backgroundColor: theme.palette.info.main\n    },\n    warning: {\n      color: theme.palette.getContrastText(theme.palette.warning.main),\n      backgroundColor: theme.palette.warning.main\n    },\n    icon: {\n      fontSize: 20\n    },\n    iconVariant: {\n      opacity: 0.9,\n      marginRight: theme.spacing(1)\n    },\n    message: {\n      display: \"flex\",\n      alignItems: \"center\"\n    }\n  })\n);\n\nexport interface SnackbarProps {\n  className?: string;\n  message?: string;\n  onClose?: () => void;\n  variant: keyof typeof variantIcon;\n}\n\nconst MySnackbarContentWrapper: React.FunctionComponent<SnackbarProps> = (\n  props: SnackbarProps\n) => {\n  const classes = useStyles();\n  const { className, message, onClose, variant, ...other } = props;\n  const Icon = variantIcon[variant];\n\n  return (\n    <SnackbarContent\n      className={clsx(classes[variant], className)}\n      aria-describedby=\"client-snackbar\"\n      message={\n        <span id=\"client-snackbar\" className={classes.message}>\n          <Icon className={clsx(classes.icon, classes.iconVariant)} />\n          {message}\n        </span>\n      }\n      action={[\n        <IconButton\n          key=\"close\"\n          aria-label=\"close\"\n          color=\"inherit\"\n          onClick={onClose}\n        >\n          <CloseIcon className={classes.icon} />\n        </IconButton>\n      ]}\n      {...other}\n    />\n  );\n};\n\ndeclare enum NotificationTypesEnum {\n  success,\n  error,\n  info,\n  warning\n}\n\ndeclare type NotificationTypes = keyof typeof NotificationTypesEnum;\n\nexport declare interface NotificationMessage {\n  message: string;\n  type: NotificationTypes;\n  open: boolean;\n}\n\ndeclare interface MessageProps {\n  notification: NotificationMessage;\n  setNotification: (notificationMessage: NotificationMessage) => void;\n}\n\nexport default function NotificationBar({\n  notification,\n  setNotification\n}: MessageProps) {\n  const handleClose = (event?: SyntheticEvent, reason?: string) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    const type = notification.type;\n    const message = notification.message;\n    setNotification({ type, message, open: false });\n  };\n\n  return (\n    <div>\n      <Snackbar\n        anchorOrigin={{\n          vertical: \"top\",\n          horizontal: \"center\"\n        }}\n        open={notification.open}\n        autoHideDuration={6000}\n        onClose={handleClose}\n      >\n        <MySnackbarContentWrapper\n          onClose={handleClose}\n          variant={notification.type}\n          message={notification.message}\n        />\n      </Snackbar>\n    </div>\n  );\n}\n","import { Container, Divider, Fab } from \"@material-ui/core\";\nimport BugReportIcon from \"@material-ui/icons/BugReport\";\nimport React, { Fragment } from \"react\";\nimport { getConfig } from \"../Scripts/getConfig\";\nimport { styles } from \"../Styles\";\nimport DebugMain from \"./Content/Debug/DebugMain\";\nimport LinksMain from \"./Content/Links/LinksMain\";\nimport StagesMain from \"./Content/Stages/StagesMain\";\nimport NavBar from \"./Layouts/NavBar\";\nimport ScrollingSections from \"./Layouts/ScrollingSections\";\nimport TabbedSections from \"./Layouts/TabbedSections\";\nimport NotificationBar, { NotificationMessage } from \"./Misc/Notifications\";\n\ndeclare interface MainProps {\n  theme: \"light\" | \"dark\";\n  toggleTheme: () => void;\n}\n\nconst Main: React.FunctionComponent<MainProps> = ({ theme, toggleTheme }) => {\n  const [notification, setNotification] = React.useState<NotificationMessage>({\n    type: \"info\",\n    message: \"\",\n    open: false,\n  });\n  const [debugInfo, setDebugInfo] = React.useState<boolean>(false);\n  const config = getConfig();\n\n  const classes = styles();\n\n  return (\n    <Fragment>\n      <NavBar\n        pageTitle={config.config.hackathonName}\n        theme={theme}\n        toggleTheme={toggleTheme}\n      />\n      <Container className={classes.marginedTopBottom}>\n        {debugInfo && (\n          <Fragment>\n            <DebugMain config={config} classes={classes} />\n            <Divider className={classes.marginedTopBottom} />\n          </Fragment>\n        )}\n        <StagesMain stages={config.stages} classes={classes} />\n        <Divider className={classes.marginedTopBottom} />{\" \"}\n        {/* FIXME: Only show the divider if there is a timer/ */}\n        <LinksMain links={config.links} classes={classes} />\n        {config.config.tabs ? (\n          <TabbedSections config={config} classes={classes} />\n        ) : (\n          <ScrollingSections config={config} classes={classes} />\n        )}\n      </Container>\n      <NotificationBar\n        notification={notification}\n        setNotification={setNotification}\n      />\n      {window.location.href.includes(\"localhost\") && (\n        <Fab\n          color=\"primary\"\n          className={classes.fab}\n          onClick={() => {\n            setDebugInfo(!debugInfo);\n          }}\n        >\n          <BugReportIcon />\n        </Fab>\n      )}\n    </Fragment>\n  );\n};\n\nexport default Main;\n","import { CssBaseline, ThemeProvider } from \"@material-ui/core\";\nimport React, { Fragment } from \"react\";\nimport Main from \"../Components/Main\";\nimport { darkTheme, lightTheme } from \"./theme\";\nimport { useDarkMode } from \"./useDarkMode\";\n\nconst CustomThemeProvider: React.FunctionComponent = () => {\n  const { theme, toggleTheme, componentMounted } = useDarkMode();\n\n  if (!componentMounted) {\n    return <Fragment />;\n  }\n\n  return (\n    <ThemeProvider theme={theme === \"dark\" ? darkTheme : lightTheme}>\n      <Fragment>\n        <CssBaseline />\n        <Main theme={theme} toggleTheme={toggleTheme} />\n      </Fragment>\n    </ThemeProvider>\n  );\n};\n\nexport default CustomThemeProvider;\n","import React from \"react\";\n\nexport const useDarkMode = () => {\n  const [theme, setTheme] = React.useState<\"light\" | \"dark\">(\"light\");\n  const [componentMounted, setComponentMounted] = React.useState(false);\n  const setMode = (mode: \"light\" | \"dark\") => {\n    console.log(mode);\n    window.localStorage.setItem(\"theme\", mode);\n    setTheme(mode);\n  };\n\n  const toggleTheme = () => {\n    if (theme === \"light\") {\n      setMode(\"dark\");\n    } else {\n      setMode(\"light\");\n    }\n  };\n\n  React.useEffect(() => {\n    const localTheme = window.localStorage.getItem(\"theme\") as\n      | \"light\"\n      | \"dark\"\n      | null;\n    window.matchMedia &&\n    window.matchMedia(\"(prefers-color-scheme: dark)\").matches &&\n    !localTheme\n      ? setMode(\"dark\")\n      : localTheme\n      ? setTheme(localTheme)\n      : setMode(\"light\");\n    setComponentMounted(true);\n  }, []);\n\n  return { theme, toggleTheme, componentMounted };\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport CustomThemeProvider from \"./Styles/CustomThemeProvider\";\n\nReactDOM.render(<CustomThemeProvider />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}