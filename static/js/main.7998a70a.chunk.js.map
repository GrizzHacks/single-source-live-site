{"version":3,"sources":["serviceWorker.ts","Scripts/timeCounterKey.ts","Scripts/parseHelpers.ts","Scripts/timeZoneHelpers.ts","Scripts/parseConfigJson.ts","Scripts/brandingColorHelper.ts","Scripts/getConfig.ts","Scripts/parseStagesJson.ts","Scripts/parseEventsJson.ts","Scripts/parsePrizesJson.ts","Scripts/parseResourcesJson.ts","Scripts/parseLinksJson.ts","Styles/theme.ts","Styles/index.ts","Scripts/filterErrorsByType.ts","Components/Content/Debug/ErrorInfo.tsx","Components/Content/Debug/DebugMain.tsx","Components/Content/Links/LinkButton.tsx","Components/Content/Links/LinksMain.tsx","Components/Content/Stages/StageTimerNumber.tsx","Components/Content/Stages/StageTimer.tsx","Components/Content/Stages/StagesMain.tsx","Components/Layouts/NavBar.tsx","Components/Content/Events/EventInfo.tsx","Components/Content/Events/EventsMain.tsx","Components/Content/Prizes/PrizeInfo.tsx","Components/Content/Prizes/PrizesMain.tsx","Components/Content/Resources/ResourceInfo.tsx","Components/Content/Resources/ResourcesMain.tsx","Components/Layouts/ScrollingSections.tsx","Components/Layouts/TabbedSections.tsx","Components/Misc/Notifications.tsx","Components/Main.tsx","Styles/CustomThemeProvider.tsx","Styles/useDarkMode.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","key","propertyExistsFactory","data","document","errors","historicalPropertyPath","property","required","contains","push","type","error","toFix","warnIfNotLinkFactory","toLowerCase","includes","offsetMustBeWithinBoundsErrorMessage","appendTimeZoneToDateString","dateString","schemaTimeZoneOffset","hours","concat","Math","floor","abs","toString","minutes","substring","length","parseConfigJson","brandingColor","config","configJson","propertyExists","configSchema","hackathonName","timeZoneOffset","tabs","timeZoneOffsetParsed","charAt","timeZoneOffsetString","parseInt","indexOf","minutesString","offset","parseFloat","timeZoneOffsetParser","brandingColorParsed","schema","getConfig","readSchema","configErrors","stages","stagesJson","stageSchemas","Array","isArray","map","currentStage","index","propertyExistsInStage","hasStageName","hasEndTime","stageSchema","stageName","endTime","Date","isNaN","valueOf","parseStagesJson","stageErrors","events","eventsJson","eventSchemas","currentEvent","propertyExistsInEvent","warnIfNotLink","hasEventName","hasStartTime","hasEventDescription","hasType","eventSchema","eventName","speakers","startTime","eventDescription","icon","joinLink","parseEventsJson","eventErrors","prizes","prizesJson","prizeSchemas","currentPrize","propertyExistsInPrize","hasPrizeName","hasPrizeDescription","hasPrize","prizeSchema","prizeName","prizeDescription","prize","prizeValue","prizeSponsor","eligibility","parsePrizesJson","prizeErrors","resources","resourcesJson","resourceSchemas","currentResource","propertyExistsInResource","hasResourceName","hasResourceDescription","hasResourceLink","resourceSchema","resourceName","resourceDescription","resourceLink","resourceValue","parseResourcesJson","resourceErrors","links","linksJson","linksSchema","codeOfConduct","joinSlack","slackWorkspace","discord","facebook","instagram","twitter","linkedin","twitch","youtube","devpost","website","parseLinksJson","linkErrors","lightTheme","createMuiTheme","palette","primary","main","undefined","secondary","success","info","warning","darkTheme","styles","makeStyles","theme","createStyles","padded","padding","spacing","margined","margin","marginedTopBottom","marginTop","marginBottom","marginedPadded","marginRight","marginsAuto","centerText","textAlign","pageTitle","infoColor","color","backgroundColor","warningColor","errorColor","getContrastText","fab","position","bottom","right","stageTimerNumberCard","filterErrorsByType","reduce","output","currentError","ErrorInfo","classes","ListItem","alignItems","ListItemAvatar","Avatar","className","ListItemText","Typography","variant","component","DebugMain","Container","List","LinkButton","title","link","Button","fullWidth","onClick","open","startIcon","LinksMain","Grid","container","item","xs","otherLinks","StageTimerNumber","children","label","Card","StageTimer","valueOfEndTime","nextStage","initialTime","direction","checkpoints","time","callback","reload","justify","Days","Hours","Minutes","Seconds","StagesMain","findCurrentStage","currentTime","stage","React","useState","setCurrentStage","useStyles","root","flexGrow","menuButton","NavBar","toggleTheme","mainWebsiteUrl","AppBar","Toolbar","IconButton","edge","aria-label","aria-controls","aria-haspopup","setKey","newKey","keysMatch","currentKey","EventInfo","event","currentTimeMilliseconds","toLocaleTimeString","toLocaleDateString","toLocaleString","EventsMain","showPastEvents","setShowPastEvents","setCurrentTimeMilliseconds","loaded","setLoaded","updateCurrentTime","now","setTimeout","random","FormControlLabel","control","Switch","checked","onChange","name","binnedEvents","getTime","getFullYear","getMonth","getDate","binnedEventsArray","day","eventPlaceHolder","toDateString","tempDate","setDate","date","setMilliseconds","getMilliseconds","eventColor","binEventsByDate","eventList","dayIndex","PrizeInfo","PrizesMain","ResourceInfo","resource","ListItemSecondaryAction","Fab","ResourcesMain","ScrollingSections","Divider","TabPanel","value","role","hidden","id","aria-labelledby","Box","TabbedSections","currentTab","setCurrentTab","showEvents","showPrizes","showResources","Tabs","newValue","indicatorColor","textColor","scrollButtons","Tab","axis","onChangeIndex","element","variantIcon","CheckCircleIcon","WarningIcon","ErrorIcon","InfoIcon","fontSize","iconVariant","opacity","message","display","MySnackbarContentWrapper","props","onClose","other","Icon","SnackbarContent","clsx","aria-describedby","action","NotificationBar","notification","setNotification","handleClose","reason","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","Main","debugInfo","setDebugInfo","href","CustomThemeProvider","setTheme","componentMounted","setComponentMounted","setMode","mode","console","log","localStorage","setItem","useEffect","localTheme","getItem","matchMedia","matches","useDarkMode","ThemeProvider","CssBaseline","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.7998a70a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","let key: number;\r\n\r\nexport const setKey = (newKey: number) => {\r\n  key = newKey;\r\n};\r\n\r\nconst keysMatch = (currentKey: number) => key === currentKey;\r\n\r\nexport const updateCurrentTime = (\r\n  key: number,\r\n  setCurrentTimeMilliseconds: (time: number) => void\r\n) => {\r\n  setKey(key);\r\n  setCurrentTimeMilliseconds(Date.now());\r\n  setTimeout(() => {\r\n    if (keysMatch(key)) {\r\n      updateCurrentTime(key, setCurrentTimeMilliseconds);\r\n    }\r\n  }, 1000);\r\n};\r\n","import { SchemaError } from \"../../@Types\";\r\n\r\nexport const propertyExistsFactory = (\r\n  data: { [key: string]: any },\r\n  document: string,\r\n  errors: SchemaError[],\r\n  historicalPropertyPath: string = \"\"\r\n) => {\r\n  if (historicalPropertyPath) {\r\n    // Make valid path when merged with current property\r\n    historicalPropertyPath += \".\";\r\n  }\r\n  return (property: string, required: boolean, contains: string) => {\r\n    if (!data[property]) {\r\n      errors.push({\r\n        document,\r\n        property: `${historicalPropertyPath}${property}`,\r\n        type: required ? \"error\" : \"info\",\r\n        error: `No ${historicalPropertyPath}${property} provided${\r\n          required ? \"!\" : \".\"\r\n        }`,\r\n        toFix: `${\r\n          required ? \"A\" : \"If you'd like, you can a\"\r\n        }dd a field called ${historicalPropertyPath}${property} to ${document} containing ${contains}.`,\r\n      });\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n};\r\n\r\nexport const warnIfNotLinkFactory = (\r\n  data: { [key: string]: any },\r\n  document: string,\r\n  errors: SchemaError[],\r\n  historicalPropertyPath: string = \"\"\r\n) => {\r\n  if (historicalPropertyPath) {\r\n    // Make valid path when merged with current property\r\n    historicalPropertyPath += \".\";\r\n  }\r\n  return (property: string) => {\r\n    if (\r\n      !data[property].toLowerCase().includes(\"https://\") &&\r\n      !data[property].toLowerCase().includes(\"http://\")\r\n    ) {\r\n      errors.push({\r\n        document,\r\n        property: `${historicalPropertyPath}${property}`,\r\n        type: \"warning\",\r\n        error: `${historicalPropertyPath}${property} does not appear to be a link. Please double check this points to where you want hackers to go.`,\r\n        toFix:\r\n          \"Note: you may just want to add 'https://' or 'http://' in front of the link to make sure it links properly.\",\r\n      });\r\n    }\r\n  };\r\n};\r\n","const unableToParseErrorMessage = \"Unable to parse timeZoneOffset.\";\r\nconst offsetMustBeWithinBoundsErrorMessage = [\r\n  `${unableToParseErrorMessage} The offset cannot be greater than 12 or less than -12.`,\r\n  \"To fix this, just make sure that there is no more than a 12 hour offset. Example: +13:00 should become -11:00.\",\r\n];\r\n\r\nexport const timeZoneOffsetParser = (\r\n  timeZoneOffset: any\r\n): number | string[] => {\r\n  if (typeof timeZoneOffset === \"number\") {\r\n    if (timeZoneOffset < -12 || timeZoneOffset > 12) {\r\n      return offsetMustBeWithinBoundsErrorMessage;\r\n    }\r\n    return timeZoneOffset;\r\n  } else if (typeof timeZoneOffset === \"string\") {\r\n    // Verify the offset it either positive or negative\r\n    if (timeZoneOffset.charAt(0) !== \"+\" && timeZoneOffset.charAt(0) !== \"-\") {\r\n      return [\r\n        `${unableToParseErrorMessage} An offset string must either start with '+' or '-'.`,\r\n        \"Odds are, you just need to add a '+' in front of your timeZoneOffset.\",\r\n      ];\r\n    }\r\n    // Strip the plus off of the time zone offset, assume no sign is positive\r\n    let timeZoneOffsetString = timeZoneOffset;\r\n    if (timeZoneOffset.charAt(0) === \"+\") {\r\n      timeZoneOffsetString = timeZoneOffset.substring(1);\r\n    }\r\n    try {\r\n      if (timeZoneOffsetString.includes(\":\")) {\r\n        // Time zone offset is a time stamp\r\n        const hours = parseInt(\r\n          timeZoneOffsetString.substring(0, timeZoneOffsetString.indexOf(\":\"))\r\n        );\r\n        if (hours < -12 || hours > 12) {\r\n          return offsetMustBeWithinBoundsErrorMessage;\r\n        }\r\n        const minutesString = timeZoneOffsetString.substring(\r\n          timeZoneOffsetString.indexOf(\":\") + 1\r\n        );\r\n        if (minutesString.length !== 2) {\r\n          return [\r\n            `${unableToParseErrorMessage} Expected two digits for the minutes in the time stamp.`,\r\n            \"Just double check that your timeZoneOffset looks something like '+4:00'.\",\r\n          ];\r\n        }\r\n        const minutes = parseInt(minutesString);\r\n        if (minutes >= 60) {\r\n          return [\r\n            `${unableToParseErrorMessage} The minutes of the time stamp must be between 0 and 59.`,\r\n          ];\r\n        }\r\n        return hours >= 0 ? hours + minutes / 60 : hours - minutes / 60;\r\n      } else if (timeZoneOffsetString.includes(\".\")) {\r\n        // Time zone offset contains a decimal point\r\n        const offset = parseFloat(timeZoneOffsetString);\r\n        if (offset < -12 || offset > 12) {\r\n          return offsetMustBeWithinBoundsErrorMessage;\r\n        }\r\n        return offset;\r\n      } else {\r\n        // Time zone offset is an integer\r\n        const offset = parseInt(timeZoneOffsetString);\r\n        if (offset < -12 || offset > 12) {\r\n          return offsetMustBeWithinBoundsErrorMessage;\r\n        }\r\n        return offset;\r\n      }\r\n    } catch {\r\n      return [unableToParseErrorMessage];\r\n    }\r\n  } else {\r\n    return [unableToParseErrorMessage];\r\n  }\r\n};\r\n\r\nexport const appendTimeZoneToDateString = (\r\n  dateString: string,\r\n  schemaTimeZoneOffset: number\r\n) => {\r\n  const hours = \"00\".concat(\r\n    Math.floor(Math.abs(schemaTimeZoneOffset)).toString()\r\n  );\r\n  const minutes = \"00\".concat(\r\n    Math.floor(Math.abs((schemaTimeZoneOffset % 1) * 60)).toString()\r\n  );\r\n  const dateStringWithTimeZone = `${dateString}${\r\n    schemaTimeZoneOffset > 0 ? \"+\" : \"-\"\r\n  }${hours.substring(hours.length - 2, hours.length)}:${minutes.substring(\r\n    minutes.length - 2,\r\n    minutes.length\r\n  )}`;\r\n  return dateStringWithTimeZone;\r\n};\r\n","import { ConfigSchema, SchemaError } from \"../../@Types\";\r\nimport configJson from \"../Data/config.json\";\r\nimport { propertyExistsFactory } from \"./parseHelpers\";\r\nimport { timeZoneOffsetParser } from \"./timeZoneHelpers\";\r\nimport { brandingColorParser } from \"./brandingColorHelper\";\r\n\r\nexport const parseConfigJson = (): [ConfigSchema, SchemaError[]] => {\r\n  const config: { [key: string]: any } = configJson;\r\n  const errors: SchemaError[] = [];\r\n  const propertyExists = propertyExistsFactory(config, \"config.json\", errors);\r\n  const configSchema: ConfigSchema = {\r\n    hackathonName: \"\",\r\n    timeZoneOffset: 0,\r\n    tabs: false,\r\n  };\r\n\r\n  // hackathonName\r\n  if (propertyExists(\"hackathonName\", true, \"the name of your hackathon\")) {\r\n    if (typeof config.hackathonName === \"string\") {\r\n      configSchema.hackathonName = config.hackathonName;\r\n    } else {\r\n      try {\r\n        // hackathonName can be converted to a string\r\n        configSchema.hackathonName = config.hackathonName.toString();\r\n        errors.push({\r\n          document: \"config.json\",\r\n          property: \"hackathonName\",\r\n          type: \"warning\",\r\n          error: \"hackathonName is not a string.\",\r\n          toFix:\r\n            \"In most cases, just make sure your hackathon name has quotes around it.\",\r\n        });\r\n      } catch {\r\n        // hackathonName cannot be converted to a string\r\n        errors.push({\r\n          document: \"config.json\",\r\n          property: \"hackathonName\",\r\n          type: \"error\",\r\n          error: \"hackathonName is not a string.\",\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  // timeZoneOffset\r\n  if (\r\n    propertyExists(\r\n      \"timeZoneOffset\",\r\n      true,\r\n      \"the time zone offset from UTC of your hackathon\"\r\n    )\r\n  ) {\r\n    const timeZoneOffsetParsed = timeZoneOffsetParser(config.timeZoneOffset);\r\n    if (typeof timeZoneOffsetParsed === \"number\") {\r\n      configSchema.timeZoneOffset = timeZoneOffsetParsed;\r\n    } else {\r\n      errors.push({\r\n        document: \"config.json\",\r\n        property: \"timeZoneOffset\",\r\n        type: \"error\",\r\n        error: timeZoneOffsetParsed[0],\r\n        toFix: timeZoneOffsetParsed[1],\r\n      });\r\n    }\r\n  }\r\n\r\n  // timeZoneOffset\r\n  if (\r\n    propertyExists(\r\n      \"brandingColor\",\r\n      false,\r\n      \"the main branding color of your hackathon\"\r\n    )\r\n  ) {\r\n    const brandingColorParsed = brandingColorParser(config.brandingColor);\r\n    if (typeof brandingColorParsed === \"string\") {\r\n      configSchema.brandingColor = brandingColorParsed;\r\n    } else {\r\n      errors.push({\r\n        document: \"config.json\",\r\n        property: \"brandingColor\",\r\n        type: \"error\",\r\n        error: brandingColorParsed[0],\r\n        toFix: brandingColorParsed[1],\r\n      });\r\n    }\r\n\r\n    // tabs\r\n    if (\r\n      propertyExists(\r\n        \"tabs\",\r\n        false,\r\n        \"a boolean representing if tabs or a single scrolling page should be used to seperate sections. If no value is provided, the site is layed out as a single scrolling page\"\r\n      )\r\n    ) {\r\n      configSchema.tabs = config.tabs;\r\n    }\r\n  }\r\n\r\n  return [configSchema, errors];\r\n};\r\n","const unableToParseErrorMessage = \"Unable to parse brandingColor.\";\r\n\r\nexport const brandingColorParser = (brandingColor: any): string | string[] => {\r\n  if (typeof brandingColor === \"string\") {\r\n    if (brandingColor.match(/^#([0-9a-f]{3}){1,2}$/i)) {\r\n      // Hex Color Code\r\n      return brandingColor;\r\n    } else {\r\n      // TODO: Add support for Material Colors\r\n      return [\r\n        `${unableToParseErrorMessage} brandingColor does not appear to be a hex color code.`,\r\n        \"Support for Material Colors is coming soon. In the mean time, you can get the hex code of a material color at https://material.io/design/color/the-color-system.\",\r\n      ];\r\n    }\r\n  } else {\r\n    return [unableToParseErrorMessage];\r\n  }\r\n};\r\n","import { Schema } from \"../../@Types\";\r\nimport { parseConfigJson } from \"./parseConfigJson\";\r\nimport { parseEventsJson } from \"./parseEventsJson\";\r\nimport { parseLinksJson } from \"./parseLinksJson\";\r\nimport { parsePrizesJson } from \"./parsePrizesJson\";\r\nimport { parseResourcesJson } from \"./parseResourcesJson\";\r\nimport { parseStagesJson } from \"./parseStagesJson\";\r\n\r\nlet schema: Schema | null = null;\r\n\r\nexport const getConfig = (): Schema => {\r\n  if (!schema) {\r\n    schema = readSchema();\r\n  }\r\n  return schema;\r\n};\r\n\r\nconst readSchema = (): Schema => {\r\n  const [config, configErrors] = parseConfigJson();\r\n  const [stages, stageErrors] = parseStagesJson(config.timeZoneOffset);\r\n  const [events, eventErrors] = parseEventsJson(config.timeZoneOffset);\r\n  const [prizes, prizeErrors] = parsePrizesJson();\r\n  const [resources, resourceErrors] = parseResourcesJson();\r\n  const [links, linkErrors] = parseLinksJson();\r\n  return {\r\n    config,\r\n    stages,\r\n    events,\r\n    prizes,\r\n    resources,\r\n    links,\r\n    errors: configErrors.concat(\r\n      stageErrors,\r\n      eventErrors,\r\n      prizeErrors,\r\n      resourceErrors,\r\n      linkErrors\r\n    ),\r\n  };\r\n};\r\n","import { SchemaError, StageSchema } from \"../../@Types\";\r\nimport stagesJson from \"../Data/stages.json\";\r\nimport { propertyExistsFactory } from \"./parseHelpers\";\r\nimport { appendTimeZoneToDateString } from \"./timeZoneHelpers\";\r\n\r\nexport const parseStagesJson = (\r\n  schemaTimeZoneOffset: number\r\n): [StageSchema[], SchemaError[]] => {\r\n  const stages: { [key: string]: any } = stagesJson;\r\n  const errors: SchemaError[] = [];\r\n  const propertyExists = propertyExistsFactory(stages, \"stages.json\", errors);\r\n  const stageSchemas: StageSchema[] = [];\r\n\r\n  // stages\r\n  if (\r\n    propertyExists(\r\n      \"stages\",\r\n      false,\r\n      \"the various stages of your hackathon. For reference, check out https://github.com/andrewdimmer/single-source/blob/main/docs/dataStructure.md#stagesjson\"\r\n    )\r\n  ) {\r\n    if (Array.isArray(stages.stages)) {\r\n      // stages is a valid array, start checking each stage\r\n      stages.stages.map((currentStage, index) => {\r\n        // Verify that all of the required stage properties exist\r\n        const propertyExistsInStage = propertyExistsFactory(\r\n          currentStage,\r\n          \"stages.json\",\r\n          errors,\r\n          `stages[${index}]`\r\n        );\r\n        const hasStageName = propertyExistsInStage(\r\n          \"stageName\",\r\n          true,\r\n          \"the name of the stage. For reference, check out https://github.com/andrewdimmer/single-source/blob/main/docs/dataStructure.md#stagesjson\"\r\n        );\r\n        const hasEndTime = propertyExistsInStage(\r\n          \"endTime\",\r\n          true,\r\n          \"the end time of the stage as an ISO timestamp. For reference, check out https://github.com/andrewdimmer/single-source/blob/main/docs/dataStructure.md#stagesjson\"\r\n        );\r\n\r\n        if (hasStageName && hasEndTime) {\r\n          // stage object has all required properties, check data\r\n          const stageSchema: StageSchema = {\r\n            stageName: \"\",\r\n            endTime: new Date(),\r\n          };\r\n\r\n          // Validate stageName\r\n          if (typeof currentStage.stageName === \"string\") {\r\n            // stageName is a valid string\r\n            stageSchema.stageName = currentStage.stageName;\r\n          } else {\r\n            try {\r\n              // stageName can be converted to a string\r\n              stageSchema.stageName = currentStage.stageName.toString();\r\n              errors.push({\r\n                document: \"stages.json\",\r\n                property: `stages[${index}].stageName`,\r\n                type: \"warning\",\r\n                error: `stages[${index}].stageName is not a string.`,\r\n                toFix:\r\n                  \"In most cases, just make sure your stage name has quotes around it.\",\r\n              });\r\n            } catch {\r\n              // stageName cannot be converted to a string\r\n              errors.push({\r\n                document: \"stages.json\",\r\n                property: `stages[${index}].stageName`,\r\n                type: \"error\",\r\n                error: `stages[${index}].stageName is not a string.`,\r\n              });\r\n            }\r\n          }\r\n\r\n          // Validate endTime\r\n          if (typeof currentStage.endTime === \"string\") {\r\n            stageSchema.endTime = new Date(\r\n              appendTimeZoneToDateString(\r\n                currentStage.endTime,\r\n                schemaTimeZoneOffset\r\n              )\r\n            );\r\n            if (isNaN(stageSchema.endTime.valueOf())) {\r\n              // endTime cannot be parsed as a date!\r\n              errors.push({\r\n                document: \"stages.json\",\r\n                property: `stages[${index}].endTime`,\r\n                type: \"error\",\r\n                error: `stages[${index}].endTime is not valid date.`,\r\n              });\r\n            } else if (stageSchema.stageName) {\r\n              // Both stageName and endTime are valid, push the object to stageSchemas\r\n              stageSchemas.push(stageSchema);\r\n            }\r\n          } else {\r\n            // endTime is not a valid string, therefore it cannot be parsed!\r\n            errors.push({\r\n              document: \"stages.json\",\r\n              property: `stages[${index}].endTime`,\r\n              type: \"error\",\r\n              error: `stages[${index}].endTime is not a string.`,\r\n            });\r\n          }\r\n        }\r\n        return null;\r\n      });\r\n    } else {\r\n      // stages is not an array\r\n      errors.push({\r\n        document: \"stages.json\",\r\n        property: \"stages\",\r\n        type: \"error\",\r\n        error: \"stages is not an array.\",\r\n        toFix:\r\n          \"For reference, check out https://github.com/andrewdimmer/single-source/blob/main/docs/dataStructure.md#stagesjson.\",\r\n      });\r\n    }\r\n  }\r\n\r\n  return [stageSchemas, errors];\r\n};\r\n","import { EventSchema, SchemaError } from \"../../@Types\";\r\nimport eventsJson from \"../Data/events.json\";\r\nimport { propertyExistsFactory, warnIfNotLinkFactory } from \"./parseHelpers\";\r\nimport { appendTimeZoneToDateString } from \"./timeZoneHelpers\";\r\n\r\nexport const parseEventsJson = (\r\n  schemaTimeZoneOffset: number\r\n): [EventSchema[], SchemaError[]] => {\r\n  const events: { [key: string]: any } = eventsJson;\r\n  const errors: SchemaError[] = [];\r\n  const propertyExists = propertyExistsFactory(events, \"events.json\", errors);\r\n  const eventSchemas: EventSchema[] = [];\r\n\r\n  // events\r\n  if (\r\n    propertyExists(\r\n      \"events\",\r\n      false,\r\n      \"the various events of your hackathon. For reference, check out https://github.com/andrewdimmer/single-source/blob/main/docs/dataStructure.md#eventsjson\"\r\n    )\r\n  ) {\r\n    if (Array.isArray(events.events)) {\r\n      // events is a valid array, start checking each event\r\n      events.events.map((currentEvent, index) => {\r\n        // Verify that all of the required event properties exist\r\n        const propertyExistsInEvent = propertyExistsFactory(\r\n          currentEvent,\r\n          \"events.json\",\r\n          errors,\r\n          `events[${index}]`\r\n        );\r\n        const warnIfNotLink = warnIfNotLinkFactory(\r\n          currentEvent,\r\n          \"events.json\",\r\n          errors,\r\n          `events[${index}]`\r\n        );\r\n        const hasEventName = propertyExistsInEvent(\r\n          \"eventName\",\r\n          true,\r\n          \"the name of the event. For reference, check out https://github.com/andrewdimmer/single-source/blob/main/docs/dataStructure.md#eventsjson\"\r\n        );\r\n        const hasStartTime = propertyExistsInEvent(\r\n          \"startTime\",\r\n          true,\r\n          \"the start time of the event as an ISO timestamp. For reference, check out https://github.com/andrewdimmer/single-source/blob/main/docs/dataStructure.md#eventsjson\"\r\n        );\r\n        const hasEndTime = propertyExistsInEvent(\r\n          \"endTime\",\r\n          true,\r\n          \"the end time of the event as an ISO timestamp. For reference, check out https://github.com/andrewdimmer/single-source/blob/main/docs/dataStructure.md#eventsjson\"\r\n        );\r\n        const hasEventDescription = propertyExistsInEvent(\r\n          \"eventDescription\",\r\n          true,\r\n          \"a description of the event. For reference, check out https://github.com/andrewdimmer/single-source/blob/main/docs/dataStructure.md#eventsjson\"\r\n        );\r\n        const hasType = propertyExistsInEvent(\r\n          \"type\",\r\n          true,\r\n          \"the type of event. For reference, check out https://github.com/andrewdimmer/single-source/blob/main/docs/dataStructure.md#eventsjson\"\r\n        );\r\n\r\n        if (\r\n          hasEventName &&\r\n          hasStartTime &&\r\n          hasEndTime &&\r\n          hasEventDescription &&\r\n          hasType\r\n        ) {\r\n          // event object has all required properties, check data\r\n          const eventSchema: EventSchema = {\r\n            eventName: \"\",\r\n            speakers: [],\r\n            startTime: new Date(),\r\n            endTime: new Date(),\r\n            eventDescription: \"\",\r\n            icon: \"calendar_today\",\r\n            type: \"\",\r\n          };\r\n\r\n          // Validate eventName\r\n          if (typeof currentEvent.eventName === \"string\") {\r\n            // eventName is a valid string\r\n            eventSchema.eventName = currentEvent.eventName;\r\n          } else {\r\n            try {\r\n              // eventName can be converted to a string\r\n              eventSchema.eventName = currentEvent.eventName.toString();\r\n              errors.push({\r\n                document: \"events.json\",\r\n                property: `events[${index}].eventName`,\r\n                type: \"warning\",\r\n                error: `events[${index}].eventName is not a string.`,\r\n                toFix:\r\n                  \"In most cases, just make sure your event name has quotes around it.\",\r\n              });\r\n            } catch {\r\n              // eventName cannot be converted to a string\r\n              errors.push({\r\n                document: \"events.json\",\r\n                property: `events[${index}].eventName`,\r\n                type: \"error\",\r\n                error: `events[${index}].eventName is not a string.`,\r\n              });\r\n            }\r\n          }\r\n\r\n          // Validate eventDescription\r\n          if (typeof currentEvent.eventDescription === \"string\") {\r\n            // eventDescription is a valid string\r\n            eventSchema.eventDescription = currentEvent.eventDescription;\r\n          } else {\r\n            try {\r\n              // eventDescription can be converted to a string\r\n              eventSchema.eventDescription = currentEvent.eventDescription.toString();\r\n              errors.push({\r\n                document: \"events.json\",\r\n                property: `events[${index}].eventDescription`,\r\n                type: \"warning\",\r\n                error: `events[${index}].eventDescription is not a string.`,\r\n                toFix:\r\n                  \"In most cases, just make sure your event description has quotes around it.\",\r\n              });\r\n            } catch {\r\n              // eventDescription cannot be converted to a string\r\n              errors.push({\r\n                document: \"events.json\",\r\n                property: `events[${index}].eventDescription`,\r\n                type: \"error\",\r\n                error: `events[${index}].eventDescription is not a string.`,\r\n              });\r\n            }\r\n          }\r\n\r\n          // Validate type\r\n          if (typeof currentEvent.type === \"string\") {\r\n            // type is a valid string\r\n            eventSchema.type = currentEvent.type;\r\n          } else {\r\n            try {\r\n              // type can be converted to a string\r\n              eventSchema.type = currentEvent.type.toString();\r\n              errors.push({\r\n                document: \"events.json\",\r\n                property: `events[${index}].type`,\r\n                type: \"warning\",\r\n                error: `events[${index}].type is not a string.`,\r\n                toFix:\r\n                  \"In most cases, just make sure your event type has quotes around it.\",\r\n              });\r\n            } catch {\r\n              // type cannot be converted to a string\r\n              errors.push({\r\n                document: \"events.json\",\r\n                property: `events[${index}].type`,\r\n                type: \"error\",\r\n                error: `events[${index}].type is not a string.`,\r\n              });\r\n            }\r\n          }\r\n\r\n          // Validate startTime\r\n          if (typeof currentEvent.startTime === \"string\") {\r\n            eventSchema.startTime = new Date(\r\n              appendTimeZoneToDateString(\r\n                currentEvent.startTime,\r\n                schemaTimeZoneOffset\r\n              )\r\n            );\r\n            if (isNaN(eventSchema.startTime.valueOf())) {\r\n              // startTime cannot be parsed as a date!\r\n              errors.push({\r\n                document: \"events.json\",\r\n                property: `events[${index}].startTime`,\r\n                type: \"error\",\r\n                error: `events[${index}].startTime is not valid date.`,\r\n              });\r\n            }\r\n          } else {\r\n            // startTime is not a valid string, therefore it cannot be parsed!\r\n            errors.push({\r\n              document: \"events.json\",\r\n              property: `events[${index}].startTime`,\r\n              type: \"error\",\r\n              error: `events[${index}].startTime is not a string.`,\r\n            });\r\n          }\r\n\r\n          // Validate endTime\r\n          if (typeof currentEvent.endTime === \"string\") {\r\n            eventSchema.endTime = new Date(\r\n              appendTimeZoneToDateString(\r\n                currentEvent.endTime,\r\n                schemaTimeZoneOffset\r\n              )\r\n            );\r\n            if (isNaN(eventSchema.endTime.valueOf())) {\r\n              // endTime cannot be parsed as a date!\r\n              errors.push({\r\n                document: \"events.json\",\r\n                property: `events[${index}].endTime`,\r\n                type: \"error\",\r\n                error: `events[${index}].endTime is not valid date.`,\r\n              });\r\n            }\r\n          } else {\r\n            // endTime is not a valid string, therefore it cannot be parsed!\r\n            errors.push({\r\n              document: \"events.json\",\r\n              property: `events[${index}].endTime`,\r\n              type: \"error\",\r\n              error: `events[${index}].endTime is not a string.`,\r\n            });\r\n          }\r\n\r\n          // location\r\n          if (\r\n            propertyExistsInEvent(\r\n              \"location\",\r\n              false,\r\n              \"the location of the event\"\r\n            )\r\n          ) {\r\n            if (typeof currentEvent.location === \"string\") {\r\n              eventSchema.location = currentEvent.location;\r\n            } else {\r\n              try {\r\n                // location can be converted to a string\r\n                eventSchema.location = currentEvent.location.toString();\r\n                errors.push({\r\n                  document: \"events.json\",\r\n                  property: \"location\",\r\n                  type: \"warning\",\r\n                  error: \"location is not a string.\",\r\n                  toFix:\r\n                    \"In most cases, just make sure your event location has quotes around it.\",\r\n                });\r\n              } catch {\r\n                // location cannot be converted to a string\r\n                errors.push({\r\n                  document: \"events.json\",\r\n                  property: \"location\",\r\n                  type: \"error\",\r\n                  error: \"location is not a string.\",\r\n                });\r\n              }\r\n            }\r\n          }\r\n\r\n          // joinLink\r\n          if (\r\n            propertyExistsInEvent(\r\n              \"joinLink\",\r\n              false,\r\n              \"the link to join the event virtually\"\r\n            )\r\n          ) {\r\n            if (typeof currentEvent.joinLink === \"string\") {\r\n              eventSchema.joinLink = currentEvent.joinLink;\r\n              warnIfNotLink(\"joinLink\");\r\n            } else {\r\n              // joinLink is not a string, therefore cannot be a link\r\n              errors.push({\r\n                document: \"events.json\",\r\n                property: \"joinLink\",\r\n                type: \"warning\",\r\n                error: \"joinLink is not a string\",\r\n              });\r\n            }\r\n          }\r\n\r\n          if (\r\n            eventSchema.eventName &&\r\n            !isNaN(eventSchema.startTime.valueOf()) &&\r\n            !isNaN(eventSchema.startTime.valueOf()) &&\r\n            eventSchema.eventDescription &&\r\n            eventSchema.type\r\n          ) {\r\n            // All required fields are valid.\r\n            eventSchemas.push(eventSchema);\r\n          }\r\n        }\r\n        return null;\r\n      });\r\n    } else {\r\n      // events is not an array\r\n      errors.push({\r\n        document: \"events.json\",\r\n        property: \"events\",\r\n        type: \"error\",\r\n        error: \"events is not an array.\",\r\n        toFix:\r\n          \"For reference, check out https://github.com/andrewdimmer/single-source/blob/main/docs/dataStructure.md#eventsjson.\",\r\n      });\r\n    }\r\n  }\r\n\r\n  return [eventSchemas, errors];\r\n};\r\n","import { PrizeSchema, SchemaError } from \"../../@Types\";\r\nimport prizesJson from \"../Data/prizes.json\";\r\nimport { propertyExistsFactory } from \"./parseHelpers\";\r\n\r\nexport const parsePrizesJson = (): [PrizeSchema[], SchemaError[]] => {\r\n  const prizes: { [key: string]: any } = prizesJson;\r\n  const errors: SchemaError[] = [];\r\n  const propertyExists = propertyExistsFactory(prizes, \"prizes.json\", errors);\r\n  const prizeSchemas: PrizeSchema[] = [];\r\n\r\n  // prizes\r\n  if (\r\n    propertyExists(\r\n      \"prizes\",\r\n      false,\r\n      \"the various prizes you're providing at your hackathon. For reference, check out https://github.com/andrewdimmer/single-source/blob/main/docs/dataStructure.md#prizesjson\"\r\n    )\r\n  ) {\r\n    if (Array.isArray(prizes.prizes)) {\r\n      // prizes is a valid array, start checking each prize\r\n      prizes.prizes.map((currentPrize, index) => {\r\n        // Verify that all of the required prize properties exist\r\n        const propertyExistsInPrize = propertyExistsFactory(\r\n          currentPrize,\r\n          \"prizes.json\",\r\n          errors,\r\n          `prizes[${index}]`\r\n        );\r\n        /* const warnIfNotLink = warnIfNotLinkFactory(\r\n          currentPrize,\r\n          \"prizes.json\",\r\n          errors,\r\n          `prizes[${index}]`\r\n        ); */\r\n        const hasPrizeName = propertyExistsInPrize(\r\n          \"prizeName\",\r\n          true,\r\n          \"the name of the prize category. For reference, check out https://github.com/andrewdimmer/single-source/blob/main/docs/dataStructure.md#prizesjson\"\r\n        );\r\n        const hasPrizeDescription = propertyExistsInPrize(\r\n          \"prizeDescription\",\r\n          true,\r\n          \"a description of the prize category. For reference, check out https://github.com/andrewdimmer/single-source/blob/main/docs/dataStructure.md#prizesjson\"\r\n        );\r\n        const hasPrize = propertyExistsInPrize(\r\n          \"prize\",\r\n          true,\r\n          \"the prize itself. For reference, check out https://github.com/andrewdimmer/single-source/blob/main/docs/dataStructure.md#prizesjson\"\r\n        );\r\n\r\n        if (hasPrizeName && hasPrizeDescription && hasPrize) {\r\n          // prize object has all required properties, check data\r\n          const prizeSchema: PrizeSchema = {\r\n            prizeName: \"\",\r\n            prizeDescription: \"\",\r\n            prize: \"\",\r\n          };\r\n\r\n          // Validate prizeName\r\n          if (typeof currentPrize.prizeName === \"string\") {\r\n            // prizeName is a valid string\r\n            prizeSchema.prizeName = currentPrize.prizeName;\r\n          } else {\r\n            try {\r\n              // prizeName can be converted to a string\r\n              prizeSchema.prizeName = currentPrize.prizeName.toString();\r\n              errors.push({\r\n                document: \"prizes.json\",\r\n                property: `prizes[${index}].prizeName`,\r\n                type: \"warning\",\r\n                error: `prizes[${index}].prizeName is not a string.`,\r\n                toFix:\r\n                  \"In most cases, just make sure your prize name has quotes around it.\",\r\n              });\r\n            } catch {\r\n              // prizeName cannot be converted to a string\r\n              errors.push({\r\n                document: \"prizes.json\",\r\n                property: `prizes[${index}].prizeName`,\r\n                type: \"error\",\r\n                error: `prizes[${index}].prizeName is not a string.`,\r\n              });\r\n            }\r\n          }\r\n\r\n          // Validate prizeDescription\r\n          if (typeof currentPrize.prizeDescription === \"string\") {\r\n            // prizeDescription is a valid string\r\n            prizeSchema.prizeDescription = currentPrize.prizeDescription;\r\n          } else {\r\n            try {\r\n              // prizeDescription can be converted to a string\r\n              prizeSchema.prizeDescription = currentPrize.prizeDescription.toString();\r\n              errors.push({\r\n                document: \"prizes.json\",\r\n                property: `prizes[${index}].prizeDescription`,\r\n                type: \"warning\",\r\n                error: `prizes[${index}].prizeDescription is not a string.`,\r\n                toFix:\r\n                  \"In most cases, just make sure your prize description has quotes around it.\",\r\n              });\r\n            } catch {\r\n              // prizeDescription cannot be converted to a string\r\n              errors.push({\r\n                document: \"prizes.json\",\r\n                property: `prizes[${index}].prizeDescription`,\r\n                type: \"error\",\r\n                error: `prizes[${index}].prizeDescription is not a string.`,\r\n              });\r\n            }\r\n          }\r\n\r\n          // Validate prize\r\n          if (typeof currentPrize.prize === \"string\") {\r\n            // prize is a valid string\r\n            prizeSchema.prize = currentPrize.prize;\r\n          } else {\r\n            try {\r\n              // prize can be converted to a string\r\n              prizeSchema.prize = currentPrize.prize.toString();\r\n              errors.push({\r\n                document: \"prizes.json\",\r\n                property: `prizes[${index}].prize`,\r\n                type: \"warning\",\r\n                error: `prizes[${index}].prize is not a string.`,\r\n                toFix:\r\n                  \"In most cases, just make sure your prize description has quotes around it.\",\r\n              });\r\n            } catch {\r\n              // prize cannot be converted to a string\r\n              errors.push({\r\n                document: \"prizes.json\",\r\n                property: `prizes[${index}].prize`,\r\n                type: \"error\",\r\n                error: `prizes[${index}].prize is not a string.`,\r\n              });\r\n            }\r\n          }\r\n\r\n          // prizeValue\r\n          if (\r\n            propertyExistsInPrize(\"prizeValue\", false, \"the value of the prize\")\r\n          ) {\r\n            if (typeof currentPrize.prizeValue === \"string\") {\r\n              prizeSchema.prizeValue = currentPrize.prizeValue;\r\n            } else {\r\n              try {\r\n                // prizeValue can be converted to a string\r\n                prizeSchema.prizeValue = currentPrize.prizeValue.toString();\r\n                errors.push({\r\n                  document: \"events.json\",\r\n                  property: \"prizeValue\",\r\n                  type: \"warning\",\r\n                  error: \"prizeValue is not a string.\",\r\n                  toFix:\r\n                    \"In most cases, just make sure your event prizeValue has quotes around it.\",\r\n                });\r\n              } catch {\r\n                // prizeValue cannot be converted to a string\r\n                errors.push({\r\n                  document: \"events.json\",\r\n                  property: \"prizeValue\",\r\n                  type: \"error\",\r\n                  error: \"prizeValue is not a string.\",\r\n                });\r\n              }\r\n            }\r\n          }\r\n\r\n          // prizeSponsor\r\n          if (\r\n            propertyExistsInPrize(\r\n              \"prizeSponsor\",\r\n              false,\r\n              \"the sponsor of the prize\"\r\n            )\r\n          ) {\r\n            if (typeof currentPrize.prizeSponsor === \"string\") {\r\n              prizeSchema.prizeSponsor = currentPrize.prizeSponsor;\r\n            } else {\r\n              try {\r\n                // prizeSponsor can be converted to a string\r\n                prizeSchema.prizeSponsor = currentPrize.prizeSponsor.toString();\r\n                errors.push({\r\n                  document: \"events.json\",\r\n                  property: \"prizeSponsor\",\r\n                  type: \"warning\",\r\n                  error: \"prizeSponsor is not a string.\",\r\n                  toFix:\r\n                    \"In most cases, just make sure your event prizeSponsor has quotes around it.\",\r\n                });\r\n              } catch {\r\n                // prizeSponsor cannot be converted to a string\r\n                errors.push({\r\n                  document: \"events.json\",\r\n                  property: \"prizeSponsor\",\r\n                  type: \"error\",\r\n                  error: \"prizeSponsor is not a string.\",\r\n                });\r\n              }\r\n            }\r\n          }\r\n\r\n          // eligibility\r\n          if (\r\n            propertyExistsInPrize(\r\n              \"eligibility\",\r\n              false,\r\n              \"the eligibility requirements to compete for the prize\"\r\n            )\r\n          ) {\r\n            if (typeof currentPrize.eligibility === \"string\") {\r\n              prizeSchema.eligibility = currentPrize.eligibility;\r\n            } else {\r\n              try {\r\n                // eligibility can be converted to a string\r\n                prizeSchema.eligibility = currentPrize.eligibility.toString();\r\n                errors.push({\r\n                  document: \"events.json\",\r\n                  property: \"eligibility\",\r\n                  type: \"warning\",\r\n                  error: \"eligibility is not a string.\",\r\n                  toFix:\r\n                    \"In most cases, just make sure your event eligibility has quotes around it.\",\r\n                });\r\n              } catch {\r\n                // eligibility cannot be converted to a string\r\n                errors.push({\r\n                  document: \"events.json\",\r\n                  property: \"eligibility\",\r\n                  type: \"error\",\r\n                  error: \"eligibility is not a string.\",\r\n                });\r\n              }\r\n            }\r\n          }\r\n\r\n          if (\r\n            prizeSchema.prizeName &&\r\n            prizeSchema.prizeDescription &&\r\n            prizeSchema.prize\r\n          ) {\r\n            // All required fields are valid.\r\n            prizeSchemas.push(prizeSchema);\r\n          }\r\n        }\r\n        return null;\r\n      });\r\n    } else {\r\n      // prizes is not an array\r\n      errors.push({\r\n        document: \"prizes.json\",\r\n        property: \"prizes\",\r\n        type: \"error\",\r\n        error: \"prizes is not an array.\",\r\n        toFix:\r\n          \"For reference, check out https://github.com/andrewdimmer/single-source/blob/main/docs/dataStructure.md#prizesjson.\",\r\n      });\r\n    }\r\n  }\r\n\r\n  return [prizeSchemas, errors];\r\n};\r\n","import { ResourceSchema, SchemaError } from \"../../@Types\";\r\nimport resourcesJson from \"../Data/resources.json\";\r\nimport { propertyExistsFactory, warnIfNotLinkFactory } from \"./parseHelpers\";\r\n\r\nexport const parseResourcesJson = (): [ResourceSchema[], SchemaError[]] => {\r\n  const resources: { [key: string]: any } = resourcesJson;\r\n  const errors: SchemaError[] = [];\r\n  const propertyExists = propertyExistsFactory(\r\n    resources,\r\n    \"resources.json\",\r\n    errors\r\n  );\r\n  const resourceSchemas: ResourceSchema[] = [];\r\n\r\n  // resources\r\n  if (\r\n    propertyExists(\r\n      \"resources\",\r\n      false,\r\n      \"the various resources you're providing at your hackathon. For reference, check out https://github.com/andrewdimmer/single-source/blob/main/docs/dataStructure.md#resourcesjson\"\r\n    )\r\n  ) {\r\n    if (Array.isArray(resources.resources)) {\r\n      // resources is a valid array, start checking each resource\r\n      resources.resources.map((currentResource, index) => {\r\n        // Verify that all of the required resource properties exist\r\n        const propertyExistsInResource = propertyExistsFactory(\r\n          currentResource,\r\n          \"resources.json\",\r\n          errors,\r\n          `resources[${index}]`\r\n        );\r\n        const warnIfNotLink = warnIfNotLinkFactory(\r\n          currentResource,\r\n          \"resources.json\",\r\n          errors,\r\n          `resources[${index}]`\r\n        );\r\n        const hasResourceName = propertyExistsInResource(\r\n          \"resourceName\",\r\n          true,\r\n          \"the name of the resource. For reference, check out https://github.com/andrewdimmer/single-source/blob/main/docs/dataStructure.md#resourcesjson\"\r\n        );\r\n        const hasResourceDescription = propertyExistsInResource(\r\n          \"resourceDescription\",\r\n          true,\r\n          \"a description of the resource. For reference, check out https://github.com/andrewdimmer/single-source/blob/main/docs/dataStructure.md#resourcesjson\"\r\n        );\r\n        const hasResourceLink = propertyExistsInResource(\r\n          \"resourceLink\",\r\n          true,\r\n          \"the link to the resource. For reference, check out https://github.com/andrewdimmer/single-source/blob/main/docs/dataStructure.md#resourcesjson\"\r\n        );\r\n\r\n        if (hasResourceName && hasResourceDescription && hasResourceLink) {\r\n          // resource object has all required properties, check data\r\n          const resourceSchema: ResourceSchema = {\r\n            resourceName: \"\",\r\n            resourceDescription: \"\",\r\n            resourceLink: \"\",\r\n          };\r\n\r\n          // Validate resourceName\r\n          if (typeof currentResource.resourceName === \"string\") {\r\n            // resourceName is a valid string\r\n            resourceSchema.resourceName = currentResource.resourceName;\r\n          } else {\r\n            try {\r\n              // resourceName can be converted to a string\r\n              resourceSchema.resourceName = currentResource.resourceName.toString();\r\n              errors.push({\r\n                document: \"resources.json\",\r\n                property: `resources[${index}].resourceName`,\r\n                type: \"warning\",\r\n                error: `resources[${index}].resourceName is not a string.`,\r\n                toFix:\r\n                  \"In most cases, just make sure your resource name has quotes around it.\",\r\n              });\r\n            } catch {\r\n              // resourceName cannot be converted to a string\r\n              errors.push({\r\n                document: \"resources.json\",\r\n                property: `resources[${index}].resourceName`,\r\n                type: \"error\",\r\n                error: `resources[${index}].resourceName is not a string.`,\r\n              });\r\n            }\r\n          }\r\n\r\n          // Validate resourceDescription\r\n          if (typeof currentResource.resourceDescription === \"string\") {\r\n            // resourceDescription is a valid string\r\n            resourceSchema.resourceDescription =\r\n              currentResource.resourceDescription;\r\n          } else {\r\n            try {\r\n              // resourceDescription can be converted to a string\r\n              resourceSchema.resourceDescription = currentResource.resourceDescription.toString();\r\n              errors.push({\r\n                document: \"resources.json\",\r\n                property: `resources[${index}].resourceDescription`,\r\n                type: \"warning\",\r\n                error: `resources[${index}].resourceDescription is not a string.`,\r\n                toFix:\r\n                  \"In most cases, just make sure your resource description has quotes around it.\",\r\n              });\r\n            } catch {\r\n              // resourceDescription cannot be converted to a string\r\n              errors.push({\r\n                document: \"resources.json\",\r\n                property: `resources[${index}].resourceDescription`,\r\n                type: \"error\",\r\n                error: `resources[${index}].resourceDescription is not a string.`,\r\n              });\r\n            }\r\n          }\r\n\r\n          // resourceLink\r\n          if (typeof currentResource.resourceLink === \"string\") {\r\n            resourceSchema.resourceLink = currentResource.resourceLink;\r\n            warnIfNotLink(\"resourceLink\");\r\n          } else {\r\n            // resourceLink is not a string, therefore cannot be a link\r\n            errors.push({\r\n              document: \"resources.json\",\r\n              property: \"resourceLink\",\r\n              type: \"warning\",\r\n              error: \"resourceLink is not a string\",\r\n            });\r\n          }\r\n\r\n          // resourceValue\r\n          if (\r\n            propertyExistsInResource(\r\n              \"resourceValue\",\r\n              false,\r\n              \"the value of the resource\"\r\n            )\r\n          ) {\r\n            if (typeof currentResource.resourceValue === \"string\") {\r\n              resourceSchema.resourceValue = currentResource.resourceValue;\r\n            } else {\r\n              try {\r\n                // resourceValue can be converted to a string\r\n                resourceSchema.resourceValue = currentResource.resourceValue.toString();\r\n                errors.push({\r\n                  document: \"events.json\",\r\n                  property: \"resourceValue\",\r\n                  type: \"warning\",\r\n                  error: \"resourceValue is not a string.\",\r\n                  toFix:\r\n                    \"In most cases, just make sure your event resourceValue has quotes around it.\",\r\n                });\r\n              } catch {\r\n                // resourceValue cannot be converted to a string\r\n                errors.push({\r\n                  document: \"events.json\",\r\n                  property: \"resourceValue\",\r\n                  type: \"error\",\r\n                  error: \"resourceValue is not a string.\",\r\n                });\r\n              }\r\n            }\r\n          }\r\n\r\n          if (\r\n            resourceSchema.resourceName &&\r\n            resourceSchema.resourceDescription &&\r\n            resourceSchema.resourceLink\r\n          ) {\r\n            // All required fields are valid.\r\n            resourceSchemas.push(resourceSchema);\r\n          }\r\n        }\r\n        return null;\r\n      });\r\n    } else {\r\n      // resources is not an array\r\n      errors.push({\r\n        document: \"resources.json\",\r\n        property: \"resources\",\r\n        type: \"error\",\r\n        error: \"resources is not an array.\",\r\n        toFix:\r\n          \"For reference, check out https://github.com/andrewdimmer/single-source/blob/main/docs/dataStructure.md#resourcesjson.\",\r\n      });\r\n    }\r\n  }\r\n\r\n  return [resourceSchemas, errors];\r\n};\r\n","import { LinksSchema, SchemaError } from \"../../@Types\";\r\nimport linksJson from \"../Data/links.json\";\r\nimport { propertyExistsFactory, warnIfNotLinkFactory } from \"./parseHelpers\";\r\n\r\nexport const parseLinksJson = (): [LinksSchema, SchemaError[]] => {\r\n  const links: { [key: string]: any } = linksJson;\r\n  const errors: SchemaError[] = [];\r\n  const propertyExists = propertyExistsFactory(links, \"links.json\", errors);\r\n  const warnIfNotLink = warnIfNotLinkFactory(links, \"links.json\", errors);\r\n  const linksSchema: LinksSchema = {\r\n    codeOfConduct: \"https://static.mlh.io/docs/mlh-code-of-conduct.pdf\",\r\n  };\r\n\r\n  // codeOfConduct\r\n  if (\r\n    propertyExists(\r\n      \"codeOfConduct\",\r\n      false,\r\n      \"the code of conduct for your hackathon. In the mean time, this property defaults to the MLH Code of Conduct\"\r\n    )\r\n  ) {\r\n    if (typeof links.codeOfConduct === \"string\") {\r\n      linksSchema.codeOfConduct = links.codeOfConduct;\r\n      warnIfNotLink(\"codeOfConduct\");\r\n    } else {\r\n      // codeOfConduct is not a string, therefore cannot be a link\r\n      errors.push({\r\n        document: \"links.json\",\r\n        property: \"codeOfConduct\",\r\n        type: \"warning\",\r\n        error:\r\n          \"codeOfConduct is not a string. In the mean time, this property defaults to the MLH Code of Conduct\",\r\n      });\r\n    }\r\n  }\r\n\r\n  // joinSlack\r\n  if (\r\n    propertyExists(\r\n      \"joinSlack\",\r\n      false,\r\n      \"the join link to the Slack workspace for your hackathon\"\r\n    )\r\n  ) {\r\n    if (typeof links.joinSlack === \"string\") {\r\n      linksSchema.joinSlack = links.joinSlack;\r\n      warnIfNotLink(\"joinSlack\");\r\n    } else {\r\n      // joinSlack is not a string, therefore cannot be a link\r\n      errors.push({\r\n        document: \"links.json\",\r\n        property: \"joinSlack\",\r\n        type: \"warning\",\r\n        error: \"joinSlack is not a string\",\r\n      });\r\n    }\r\n  }\r\n\r\n  // slackWorkspace\r\n  if (\r\n    propertyExists(\r\n      \"slackWorkspace\",\r\n      false,\r\n      \"the Slack workspace for your hackathon\"\r\n    )\r\n  ) {\r\n    if (typeof links.slackWorkspace === \"string\") {\r\n      linksSchema.slackWorkspace = links.slackWorkspace;\r\n      warnIfNotLink(\"slackWorkspace\");\r\n    } else {\r\n      // slackWorkspace is not a string, therefore cannot be a link\r\n      errors.push({\r\n        document: \"links.json\",\r\n        property: \"slackWorkspace\",\r\n        type: \"warning\",\r\n        error: \"slackWorkspace is not a string\",\r\n      });\r\n    }\r\n  }\r\n  // discord\r\n  if (\r\n    propertyExists(\"discord\", false, \"the Discord server for your hackathon\")\r\n  ) {\r\n    if (typeof links.discord === \"string\") {\r\n      linksSchema.discord = links.discord;\r\n      warnIfNotLink(\"discord\");\r\n    } else {\r\n      // discord is not a string, therefore cannot be a link\r\n      errors.push({\r\n        document: \"links.json\",\r\n        property: \"discord\",\r\n        type: \"warning\",\r\n        error: \"discord is not a string\",\r\n      });\r\n    }\r\n  }\r\n  // facebook\r\n  if (\r\n    propertyExists(\"facebook\", false, \"the Facebook page for your hackathon\")\r\n  ) {\r\n    if (typeof links.facebook === \"string\") {\r\n      linksSchema.facebook = links.facebook;\r\n      warnIfNotLink(\"facebook\");\r\n    } else {\r\n      // facebook is not a string, therefore cannot be a link\r\n      errors.push({\r\n        document: \"links.json\",\r\n        property: \"facebook\",\r\n        type: \"warning\",\r\n        error: \"facebook is not a string\",\r\n      });\r\n    }\r\n  }\r\n  // instagram\r\n  if (\r\n    propertyExists(\r\n      \"instagram\",\r\n      false,\r\n      \"the Instagram profile for your hackathon\"\r\n    )\r\n  ) {\r\n    if (typeof links.instagram === \"string\") {\r\n      linksSchema.instagram = links.instagram;\r\n      warnIfNotLink(\"instagram\");\r\n    } else {\r\n      // instagram is not a string, therefore cannot be a link\r\n      errors.push({\r\n        document: \"links.json\",\r\n        property: \"instagram\",\r\n        type: \"warning\",\r\n        error: \"instagram is not a string\",\r\n      });\r\n    }\r\n  }\r\n  // twitter\r\n  if (\r\n    propertyExists(\"twitter\", false, \"the Twitter profile for your hackathon\")\r\n  ) {\r\n    if (typeof links.twitter === \"string\") {\r\n      linksSchema.twitter = links.twitter;\r\n      warnIfNotLink(\"twitter\");\r\n    } else {\r\n      // twitter is not a string, therefore cannot be a link\r\n      errors.push({\r\n        document: \"links.json\",\r\n        property: \"twitter\",\r\n        type: \"warning\",\r\n        error: \"twitter is not a string\",\r\n      });\r\n    }\r\n  }\r\n  // linkedin\r\n  if (\r\n    propertyExists(\"linkedin\", false, \"the LinkedIn page for your hackathon\")\r\n  ) {\r\n    if (typeof links.linkedin === \"string\") {\r\n      linksSchema.linkedin = links.linkedin;\r\n      warnIfNotLink(\"linkedin\");\r\n    } else {\r\n      // linkedin is not a string, therefore cannot be a link\r\n      errors.push({\r\n        document: \"links.json\",\r\n        property: \"linkedin\",\r\n        type: \"warning\",\r\n        error: \"linkedin is not a string\",\r\n      });\r\n    }\r\n  }\r\n  // twitch\r\n  if (propertyExists(\"twitch\", false, \"the Twitch stream for your hackathon\")) {\r\n    if (typeof links.twitch === \"string\") {\r\n      linksSchema.twitch = links.twitch;\r\n      warnIfNotLink(\"twitch\");\r\n    } else {\r\n      // twitch is not a string, therefore cannot be a link\r\n      errors.push({\r\n        document: \"links.json\",\r\n        property: \"twitch\",\r\n        type: \"warning\",\r\n        error: \"twitch is not a string\",\r\n      });\r\n    }\r\n  }\r\n  // youtube\r\n  if (\r\n    propertyExists(\"youtube\", false, \"the YouTube channel for your hackathon\")\r\n  ) {\r\n    if (typeof links.youtube === \"string\") {\r\n      linksSchema.youtube = links.youtube;\r\n      warnIfNotLink(\"youtube\");\r\n    } else {\r\n      // youtube is not a string, therefore cannot be a link\r\n      errors.push({\r\n        document: \"links.json\",\r\n        property: \"youtube\",\r\n        type: \"warning\",\r\n        error: \"youtube is not a string\",\r\n      });\r\n    }\r\n  }\r\n  // devpost\r\n  if (propertyExists(\"devpost\", false, \"the Devpost for your hackathon\")) {\r\n    if (typeof links.devpost === \"string\") {\r\n      linksSchema.devpost = links.devpost;\r\n      warnIfNotLink(\"devpost\");\r\n    } else {\r\n      // devpost is not a string, therefore cannot be a link\r\n      errors.push({\r\n        document: \"links.json\",\r\n        property: \"devpost\",\r\n        type: \"warning\",\r\n        error: \"devpost is not a string\",\r\n      });\r\n    }\r\n  }\r\n  // website\r\n  if (propertyExists(\"website\", false, \"the main website for your hackathon\")) {\r\n    if (typeof links.website === \"string\") {\r\n      linksSchema.website = links.website;\r\n      warnIfNotLink(\"website\");\r\n    } else {\r\n      // website is not a string, therefore cannot be a link\r\n      errors.push({\r\n        document: \"links.json\",\r\n        property: \"website\",\r\n        type: \"warning\",\r\n        error: \"website is not a string\",\r\n      });\r\n    }\r\n  }\r\n\r\n  return [linksSchema, errors];\r\n};\r\n","import { createMuiTheme } from \"@material-ui/core\";\r\nimport { getConfig } from \"../Scripts/getConfig\";\r\n\r\nconst config = getConfig();\r\n\r\nexport const lightTheme = createMuiTheme({\r\n  palette: {\r\n    primary:\r\n      typeof config.config.brandingColor === \"string\"\r\n        ? { main: config.config.brandingColor }\r\n        : undefined,\r\n    secondary: undefined,\r\n    success: undefined,\r\n    error: undefined,\r\n    info: undefined,\r\n    warning: undefined,\r\n  },\r\n});\r\n\r\nexport const darkTheme = createMuiTheme({\r\n  palette: {\r\n    type: \"dark\",\r\n    primary:\r\n      typeof config.config.brandingColor === \"string\"\r\n        ? { main: config.config.brandingColor }\r\n        : undefined,\r\n    secondary: undefined,\r\n    success: undefined,\r\n    error: undefined,\r\n    info: undefined,\r\n    warning: undefined,\r\n  },\r\n});\r\n","import { makeStyles, createStyles } from \"@material-ui/styles\";\r\nimport { Theme } from \"@material-ui/core\";\r\nimport { lightTheme as light, darkTheme as dark } from \"./theme\";\r\n\r\nexport const styles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    padded: {\r\n      padding: theme.spacing(2),\r\n    },\r\n    margined: {\r\n      margin: theme.spacing(2),\r\n    },\r\n    marginedTopBottom: {\r\n      marginTop: theme.spacing(2),\r\n      marginBottom: theme.spacing(2),\r\n    },\r\n    marginedPadded: {\r\n      margin: theme.spacing(2),\r\n      padding: theme.spacing(2),\r\n    },\r\n    marginRight: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    marginsAuto: {\r\n      margin: \"auto\",\r\n    },\r\n    centerText: {\r\n      textAlign: \"center\",\r\n    },\r\n    pageTitle: {\r\n      padding: theme.spacing(2),\r\n      textAlign: \"center\",\r\n    },\r\n    infoColor: {\r\n      color: \"#FFFFFF\",\r\n      backgroundColor: theme.palette.info.main,\r\n    },\r\n    warningColor: {\r\n      color: \"#FFFFFF\",\r\n      backgroundColor: theme.palette.warning.main,\r\n    },\r\n    errorColor: {\r\n      color: \"#FFFFFF\",\r\n      backgroundColor: theme.palette.error.main,\r\n    },\r\n    brandingColor: {\r\n      color: theme.palette.getContrastText(theme.palette.primary.main),\r\n      backgroundColor: theme.palette.primary.main,\r\n    },\r\n    fab: {\r\n      position: \"fixed\",\r\n      bottom: \"0px\",\r\n      right: \"0px\",\r\n      margin: theme.spacing(2),\r\n    },\r\n    stageTimerNumberCard: {\r\n      padding: theme.spacing(2),\r\n      textAlign: \"center\",\r\n      backgroundColor: theme.palette.primary.main,\r\n      color: theme.palette.getContrastText(theme.palette.primary.main),\r\n    },\r\n  })\r\n);\r\n\r\nexport const lightTheme = light;\r\nexport const darkTheme = dark;\r\n","import { SchemaError, SchemaErrorType } from \"../../@Types\";\r\n\r\nexport const filterErrorsByType = (\r\n  errors: SchemaError[],\r\n  type: SchemaErrorType\r\n) => {\r\n  return errors.reduce((output, currentError) => {\r\n    if (currentError.type === type) {\r\n      output.push(currentError);\r\n    }\r\n    return output;\r\n  }, [] as SchemaError[]);\r\n};\r\n","import {\r\n  Avatar,\r\n  ListItem,\r\n  ListItemAvatar,\r\n  ListItemText,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport ErrorIcon from \"@material-ui/icons/Error\";\r\nimport InfoIcon from \"@material-ui/icons/Info\";\r\nimport WarningIcon from \"@material-ui/icons/Warning\";\r\nimport React, { Fragment } from \"react\";\r\nimport { SchemaError } from \"../../../../@Types\";\r\n\r\ndeclare interface ErrorInfoProps {\r\n  error: SchemaError;\r\n  classes: any;\r\n}\r\n\r\nconst ErrorInfo: React.FunctionComponent<ErrorInfoProps> = ({\r\n  error,\r\n  classes,\r\n}) => {\r\n  return (\r\n    <ListItem alignItems=\"flex-start\">\r\n      <ListItemAvatar>\r\n        {error.type === \"error\" ? (\r\n          <Avatar className={classes.errorColor}>\r\n            <ErrorIcon />\r\n          </Avatar>\r\n        ) : error.type === \"warning\" ? (\r\n          <Avatar className={classes.warningColor}>\r\n            <WarningIcon />\r\n          </Avatar>\r\n        ) : (\r\n          <Avatar className={classes.infoColor}>\r\n            <InfoIcon />\r\n          </Avatar>\r\n        )}\r\n      </ListItemAvatar>\r\n      <ListItemText\r\n        primary={error.error}\r\n        secondary={\r\n          <Fragment>\r\n            <Typography variant=\"body1\" component=\"span\">\r\n              {error.toFix}\r\n            </Typography>\r\n            {error.toFix && <br />}\r\n            {`${error.document} : ${error.property}`}\r\n          </Fragment>\r\n        }\r\n      />\r\n      {/** TODO: Add toFixLinks support **/}\r\n    </ListItem>\r\n  );\r\n};\r\n\r\nexport default ErrorInfo;\r\n","import { Container, List, Typography } from \"@material-ui/core\";\r\nimport React, { Fragment } from \"react\";\r\nimport { Schema } from \"../../../../@Types\";\r\nimport { filterErrorsByType } from \"../../../Scripts/filterErrorsByType\";\r\nimport ErrorInfo from \"./ErrorInfo\";\r\n\r\ndeclare interface DebugMainProps {\r\n  config: Schema;\r\n  classes: any;\r\n}\r\n\r\nconst DebugMain: React.FunctionComponent<DebugMainProps> = ({\r\n  config,\r\n  classes,\r\n}) => {\r\n  return (\r\n    <Fragment>\r\n      <Container className={classes.pageTitle}>\r\n        <Typography variant=\"h4\">Debug Mode Enabled</Typography>\r\n      </Container>\r\n      <Typography variant=\"body1\">\r\n        This section contains helpful information regarding your configuation.\r\n        It is only displayed when viewing this page from localhost. To close\r\n        debug mode, click the bug icon in the lower right-hand corner.\r\n      </Typography>\r\n\r\n      <Container className={classes.pageTitle}>\r\n        <Typography variant=\"h5\">Schema Time Zone</Typography>\r\n        <Typography variant=\"body1\">\r\n          {config.config.timeZoneOffset} hour offest from UTC.\r\n        </Typography>\r\n      </Container>\r\n      <Container className={classes.pageTitle}>\r\n        <Typography variant=\"h5\">\r\n          Errors, Warnings, and Info from Parsing Data\r\n        </Typography>\r\n      </Container>\r\n      <List>\r\n        {filterErrorsByType(config.errors, \"error\").map((error, index) => {\r\n          return (\r\n            <ErrorInfo error={error} key={`error_${index}`} classes={classes} />\r\n          );\r\n        })}\r\n        {filterErrorsByType(config.errors, \"warning\").map((error, index) => {\r\n          return (\r\n            <ErrorInfo\r\n              error={error}\r\n              key={`warning_${index}`}\r\n              classes={classes}\r\n            />\r\n          );\r\n        })}\r\n        {filterErrorsByType(config.errors, \"info\").map((error, index) => {\r\n          return (\r\n            <ErrorInfo error={error} key={`info_${index}`} classes={classes} />\r\n          );\r\n        })}\r\n      </List>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default DebugMain;\r\n","import { Button, Typography } from \"@material-ui/core\";\r\nimport React from \"react\";\r\n\r\ndeclare interface LinkButtonProps {\r\n  title: string;\r\n  link: string;\r\n  icon: any;\r\n  classes: any;\r\n}\r\n\r\nconst LinkButton: React.FunctionComponent<LinkButtonProps> = ({\r\n  title,\r\n  link,\r\n  icon,\r\n  classes,\r\n}) => {\r\n  return (\r\n    <Button\r\n      color=\"primary\"\r\n      fullWidth\r\n      variant=\"contained\"\r\n      onClick={() => {\r\n        window.open(link, \"_blank\");\r\n      }}\r\n      startIcon={icon}\r\n    >\r\n      <Typography variant=\"h6\">{title}</Typography>\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport default LinkButton;\r\n","import { Container, Typography, Grid } from \"@material-ui/core\";\r\nimport WebIcon from \"@material-ui/icons/Web\";\r\nimport React, { Fragment } from \"react\";\r\nimport { LinksSchema } from \"../../../../@Types\";\r\nimport LinkButton from \"./LinkButton\";\r\nimport QuestionAnswerIcon from \"@material-ui/icons/QuestionAnswer\";\r\nimport AddCommentIcon from \"@material-ui/icons/AddComment\";\r\nimport AssignmentIcon from \"@material-ui/icons/Assignment\";\r\nimport OndemandVideoIcon from \"@material-ui/icons/OndemandVideo\";\r\nimport BookIcon from \"@material-ui/icons/Book\";\r\nimport YouTubeIcon from \"@material-ui/icons/YouTube\";\r\nimport FacebookIcon from \"@material-ui/icons/Facebook\";\r\nimport InstagramIcon from \"@material-ui/icons/Instagram\";\r\nimport TwitterIcon from \"@material-ui/icons/Twitter\";\r\nimport LinkedInIcon from \"@material-ui/icons/LinkedIn\";\r\n\r\ndeclare interface LinksMainProps {\r\n  links: LinksSchema;\r\n  classes: any;\r\n}\r\n\r\nconst LinksMain: React.FunctionComponent<LinksMainProps> = ({\r\n  links,\r\n  classes,\r\n}) => {\r\n  return (\r\n    <Fragment>\r\n      <Container className={classes.pageTitle}>\r\n        <Typography variant=\"h4\">Important Links</Typography>\r\n      </Container>\r\n\r\n      <Typography variant=\"h5\" className={classes.centerText}>\r\n        General Info and Submissions\r\n      </Typography>\r\n      <Grid container spacing={2} className={classes.marginedTopBottom}>\r\n        {links.website && (\r\n          <Grid item xs>\r\n            <LinkButton\r\n              title=\"Website\"\r\n              link={links.website}\r\n              icon={<WebIcon />}\r\n              classes={classes}\r\n            />\r\n          </Grid>\r\n        )}\r\n        {links.devpost && (\r\n          <Grid item xs>\r\n            <LinkButton\r\n              title=\"Devpost\"\r\n              link={links.devpost}\r\n              icon={<AssignmentIcon />}\r\n              classes={classes}\r\n            />\r\n          </Grid>\r\n        )}\r\n        {links.codeOfConduct && (\r\n          <Grid item xs>\r\n            <LinkButton\r\n              title=\"Code of Conduct\"\r\n              link={links.codeOfConduct}\r\n              icon={<BookIcon />}\r\n              classes={classes}\r\n            />\r\n          </Grid>\r\n        )}\r\n      </Grid>\r\n\r\n      {(links.joinSlack ||\r\n        links.slackWorkspace ||\r\n        links.discord ||\r\n        links.twitch ||\r\n        links.youtube) && (\r\n        <Fragment>\r\n          <Typography variant=\"h5\" className={classes.centerText}>\r\n            Communications and Streaming\r\n          </Typography>\r\n          <Grid container spacing={2} className={classes.marginedTopBottom}>\r\n            {links.joinSlack && (\r\n              <Grid item xs>\r\n                <LinkButton\r\n                  title=\"Join Slack\"\r\n                  link={links.joinSlack}\r\n                  icon={<AddCommentIcon />}\r\n                  classes={classes}\r\n                />\r\n              </Grid>\r\n            )}\r\n            {links.slackWorkspace && (\r\n              <Grid item xs>\r\n                <LinkButton\r\n                  title=\"Slack Workspace\"\r\n                  link={links.slackWorkspace}\r\n                  icon={<QuestionAnswerIcon />}\r\n                  classes={classes}\r\n                />\r\n              </Grid>\r\n            )}\r\n            {links.discord && (\r\n              <Grid item xs>\r\n                <LinkButton\r\n                  title=\"Discord\"\r\n                  link={links.discord}\r\n                  icon={<QuestionAnswerIcon />}\r\n                  classes={classes}\r\n                />\r\n              </Grid>\r\n            )}\r\n            {links.twitch && (\r\n              <Grid item xs>\r\n                <LinkButton\r\n                  title=\"Twitch\"\r\n                  link={links.twitch}\r\n                  icon={<OndemandVideoIcon />}\r\n                  classes={classes}\r\n                />\r\n              </Grid>\r\n            )}\r\n            {links.youtube && (\r\n              <Grid item xs>\r\n                <LinkButton\r\n                  title=\"YouTube\"\r\n                  link={links.youtube}\r\n                  icon={<YouTubeIcon />}\r\n                  classes={classes}\r\n                />\r\n              </Grid>\r\n            )}\r\n          </Grid>\r\n        </Fragment>\r\n      )}\r\n\r\n      {(links.facebook ||\r\n        links.instagram ||\r\n        links.twitter ||\r\n        links.linkedin) && (\r\n        <Fragment>\r\n          <Typography variant=\"h5\" className={classes.centerText}>\r\n            Social Media\r\n          </Typography>\r\n          <Grid container spacing={2} className={classes.marginedTopBottom}>\r\n            {links.facebook && (\r\n              <Grid item xs>\r\n                <LinkButton\r\n                  title=\"Facebook\"\r\n                  link={links.facebook}\r\n                  icon={<FacebookIcon />}\r\n                  classes={classes}\r\n                />\r\n              </Grid>\r\n            )}\r\n            {links.instagram && (\r\n              <Grid item xs>\r\n                <LinkButton\r\n                  title=\"Instagram\"\r\n                  link={links.instagram}\r\n                  icon={<InstagramIcon />}\r\n                  classes={classes}\r\n                />\r\n              </Grid>\r\n            )}\r\n            {links.twitter && (\r\n              <Grid item xs>\r\n                <LinkButton\r\n                  title=\"Twitter\"\r\n                  link={links.twitter}\r\n                  icon={<TwitterIcon />}\r\n                  classes={classes}\r\n                />\r\n              </Grid>\r\n            )}\r\n            {links.linkedin && (\r\n              <Grid item xs>\r\n                <LinkButton\r\n                  title=\"LinkedIn\"\r\n                  link={links.linkedin}\r\n                  icon={<LinkedInIcon />}\r\n                  classes={classes}\r\n                />\r\n              </Grid>\r\n            )}\r\n          </Grid>\r\n        </Fragment>\r\n      )}\r\n\r\n      {links.otherLinks && (\r\n        <Fragment>\r\n          <Typography variant=\"h5\" className={classes.centerText}>\r\n            Other Links\r\n          </Typography>\r\n        </Fragment>\r\n      )}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default LinksMain;\r\n","import { Card, Typography } from \"@material-ui/core\";\r\nimport React from \"react\";\r\n\r\ndeclare interface StageTimerNumberProps {\r\n  label: string;\r\n  classes: any;\r\n}\r\n\r\nconst StageTimerNumber: React.FunctionComponent<StageTimerNumberProps> = ({\r\n  children,\r\n  label,\r\n  classes,\r\n}) => {\r\n  return (\r\n    <Card className={classes.stageTimerNumberCard}>\r\n      <Typography variant=\"h2\">{children}</Typography>\r\n      <Typography variant=\"h6\">{label}</Typography>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default StageTimerNumber;\r\n","import { Grid } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport Timer from \"react-compound-timer\";\r\nimport StageTimerNumber from \"./StageTimerNumber\";\r\n\r\ndeclare interface StageTimerProps {\r\n  valueOfEndTime: number;\r\n  nextStage: () => void;\r\n  classes: any;\r\n}\r\n\r\nconst StageTimer: React.FunctionComponent<StageTimerProps> = ({\r\n  valueOfEndTime,\r\n  nextStage,\r\n  classes,\r\n}) => {\r\n  return (\r\n    <Timer\r\n      initialTime={valueOfEndTime - new Date().valueOf()}\r\n      direction=\"backward\"\r\n      checkpoints={[\r\n        {\r\n          time: 0,\r\n          callback: () => {\r\n            // Note: The timer does not reinitialize when calling nextStage,\r\n            // so instead the page is refreshed.\r\n            // FIXME: Figueout how to change the timer value without a refresh...\r\n            window.location.reload();\r\n          },\r\n        },\r\n      ]}\r\n    >\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        justify=\"center\"\r\n        alignItems=\"center\"\r\n        spacing={2}\r\n      >\r\n        <Grid item xs={3}>\r\n          <StageTimerNumber label=\"days\" classes={classes}>\r\n            <Timer.Days />\r\n          </StageTimerNumber>\r\n        </Grid>\r\n        <Grid item xs={3}>\r\n          <StageTimerNumber label=\"hours\" classes={classes}>\r\n            <Timer.Hours />\r\n          </StageTimerNumber>\r\n        </Grid>\r\n        <Grid item xs={3}>\r\n          <StageTimerNumber label=\"minutes\" classes={classes}>\r\n            <Timer.Minutes />\r\n          </StageTimerNumber>\r\n        </Grid>\r\n        <Grid item xs={3}>\r\n          <StageTimerNumber label=\"seconds\" classes={classes}>\r\n            <Timer.Seconds />\r\n          </StageTimerNumber>\r\n        </Grid>\r\n      </Grid>\r\n    </Timer>\r\n  );\r\n};\r\n\r\nexport default StageTimer;\r\n","import { Container, Typography } from \"@material-ui/core\";\r\nimport React, { Fragment } from \"react\";\r\nimport { StageSchema } from \"../../../../@Types\";\r\nimport StageTimer from \"./StageTimer\";\r\n\r\ndeclare interface StagesMainProps {\r\n  stages: StageSchema[];\r\n  classes: any;\r\n}\r\n\r\nconst StagesMain: React.FunctionComponent<StagesMainProps> = ({\r\n  stages,\r\n  classes,\r\n}) => {\r\n  const findCurrentStage = () => {\r\n    const currentTime = new Date();\r\n    for (const stage of stages) {\r\n      if (currentTime < stage.endTime) {\r\n        return stage;\r\n      }\r\n    }\r\n    // The last stage has already ended; there are now more upcoming.\r\n    return undefined;\r\n  };\r\n\r\n  const [currentStage, setCurrentStage] = React.useState<\r\n    StageSchema | undefined\r\n  >(findCurrentStage());\r\n\r\n  return currentStage ? (\r\n    <Fragment>\r\n      <Container className={classes.pageTitle}>\r\n        <Typography variant=\"h4\">{currentStage.stageName} in </Typography>\r\n      </Container>\r\n      <StageTimer\r\n        valueOfEndTime={currentStage.endTime.valueOf()}\r\n        nextStage={() => setCurrentStage(findCurrentStage())}\r\n        classes={classes}\r\n      />\r\n    </Fragment>\r\n  ) : (\r\n    <Fragment />\r\n  );\r\n};\r\n\r\nexport default StagesMain;\r\n","import {\r\n  AppBar,\r\n  createStyles,\r\n  IconButton,\r\n  makeStyles,\r\n  Theme,\r\n  Toolbar,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\r\nimport Brightness4Icon from \"@material-ui/icons/Brightness4\";\r\nimport Brightness7Icon from \"@material-ui/icons/Brightness7\";\r\nimport React from \"react\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n    },\r\n  })\r\n);\r\n\r\ndeclare interface NavBarProps {\r\n  theme: \"light\" | \"dark\";\r\n  toggleTheme: () => void;\r\n  pageTitle: string;\r\n  mainWebsiteUrl?: string;\r\n}\r\n\r\nconst NavBar: React.FunctionComponent<NavBarProps> = ({\r\n  theme,\r\n  toggleTheme,\r\n  pageTitle,\r\n  mainWebsiteUrl,\r\n}) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          {mainWebsiteUrl && (\r\n            <IconButton\r\n              edge=\"start\"\r\n              className={classes.menuButton}\r\n              color=\"inherit\"\r\n              aria-label=\"back\"\r\n              onClick={() => {\r\n                window.open(mainWebsiteUrl);\r\n              }}\r\n            >\r\n              <ArrowBackIcon />\r\n            </IconButton>\r\n          )}\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            {pageTitle ? `${pageTitle} - ` : \"\"}Live\r\n          </Typography>\r\n\r\n          <div>\r\n            <IconButton\r\n              aria-label=\"Toggle light/dark theme\"\r\n              aria-controls=\"menu-appbar\"\r\n              aria-haspopup=\"true\"\r\n              onClick={toggleTheme}\r\n              color=\"inherit\"\r\n            >\r\n              {theme === \"dark\" ? <Brightness7Icon /> : <Brightness4Icon />}\r\n            </IconButton>\r\n          </div>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import {\r\n  Avatar,\r\n  Button,\r\n  Container,\r\n  ListItem,\r\n  ListItemAvatar,\r\n  ListItemText,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport CalendarTodayIcon from \"@material-ui/icons/CalendarToday\";\r\nimport React, { Fragment } from \"react\";\r\nimport { EventSchema } from \"../../../../@Types\";\r\n\r\ndeclare interface EventInfoProps {\r\n  event: EventSchema;\r\n  currentTimeMilliseconds: number;\r\n  classes: any;\r\n}\r\n\r\nconst EventInfo: React.FunctionComponent<EventInfoProps> = ({\r\n  event,\r\n  currentTimeMilliseconds,\r\n  classes,\r\n}) => {\r\n  return (\r\n    <ListItem alignItems=\"flex-start\">\r\n      <ListItemAvatar>\r\n        <Avatar className={classes.brandingColor}>\r\n          <CalendarTodayIcon />\r\n        </Avatar>\r\n      </ListItemAvatar>\r\n      <ListItemText\r\n        primary={`[${event.type}]: ${event.eventName}`}\r\n        secondary={\r\n          <Fragment>\r\n            <Typography variant=\"body1\" component=\"span\">\r\n              {event.startTime.toLocaleTimeString()} -{\" \"}\r\n              {event.startTime.toLocaleDateString() ===\r\n              event.endTime.toLocaleDateString()\r\n                ? event.endTime.toLocaleTimeString()\r\n                : event.endTime.toLocaleString()}{\" \"}\r\n              {event.location ? \"|\" : \"\"} {event.location}\r\n            </Typography>\r\n            <br />\r\n            {event.eventDescription}\r\n            {event.joinLink &&\r\n              event.startTime.valueOf() - 60000 * 10 <=\r\n                currentTimeMilliseconds &&\r\n              event.endTime.valueOf() >= currentTimeMilliseconds && (\r\n                <Container className={classes.pageTitle}>\r\n                  <Button\r\n                    color=\"primary\"\r\n                    variant=\"contained\"\r\n                    onClick={() => {\r\n                      window.open(event.joinLink, \"_blank\");\r\n                    }}\r\n                  >\r\n                    Join Virtually!\r\n                  </Button>\r\n                </Container>\r\n              )}\r\n          </Fragment>\r\n        }\r\n      />\r\n      {/** TODO: Add Speakers, Custom Icons, and Custom Colors **/}\r\n    </ListItem>\r\n  );\r\n};\r\n\r\nexport default EventInfo;\r\n","import {\r\n  Container,\r\n  FormControlLabel,\r\n  List,\r\n  Switch,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport React, { Fragment } from \"react\";\r\nimport { EventSchema } from \"../../../../@Types\";\r\nimport { updateCurrentTime } from \"../../../Scripts/timeCounterKey\";\r\nimport EventInfo from \"./EventInfo\";\r\n\r\ndeclare interface EventsMainProps {\r\n  events: EventSchema[];\r\n  classes: any;\r\n}\r\n\r\nconst EventsMain: React.FunctionComponent<EventsMainProps> = ({\r\n  events,\r\n  classes,\r\n}) => {\r\n  const [showPastEvents, setShowPastEvents] = React.useState<boolean>(false);\r\n  const [currentTimeMilliseconds, setCurrentTimeMilliseconds] = React.useState<\r\n    number\r\n  >(0);\r\n  const [loaded, setLoaded] = React.useState<boolean>(false);\r\n\r\n  const binEventsByDate = () => {\r\n    const binnedEvents: { [key: string]: EventSchema[] } = {};\r\n    for (const event of events) {\r\n      if (showPastEvents || event.endTime.getTime() > Date.now()) {\r\n        const dateString = `${event.startTime.getFullYear()}${event.startTime.getMonth()}${event.startTime.getDate()}`;\r\n        if (binnedEvents[dateString]) {\r\n          binnedEvents[dateString].push(event);\r\n        } else {\r\n          binnedEvents[dateString] = [event];\r\n        }\r\n      }\r\n    }\r\n    const binnedEventsArray: EventSchema[][] = [];\r\n    for (const day in binnedEvents) {\r\n      binnedEventsArray.push(binnedEvents[day]);\r\n    }\r\n    if (binnedEventsArray.length === 0) {\r\n      const eventPlaceHolder: EventSchema = {\r\n        eventName: \"No Upcoming Events...\",\r\n        type: \"No Events\",\r\n        speakers: [],\r\n        startTime: new Date(new Date().toDateString()),\r\n        endTime: (() => {\r\n          const tempDate = new Date();\r\n          tempDate.setDate(tempDate.getDate() + 1);\r\n          const date = new Date(tempDate.toDateString());\r\n          date.setMilliseconds(date.getMilliseconds() - 1);\r\n          return date;\r\n        })(),\r\n        eventDescription: \"Sorry, but there are no upcoming events...\",\r\n        icon: \"\",\r\n        eventColor: \"\",\r\n      };\r\n      binnedEventsArray.push([eventPlaceHolder]);\r\n    }\r\n    return binnedEventsArray;\r\n  };\r\n\r\n  if (!loaded) {\r\n    setLoaded(true);\r\n    updateCurrentTime(Math.random(), setCurrentTimeMilliseconds);\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <Container className={classes.pageTitle}>\r\n        <Typography variant=\"h4\">Events and Activities</Typography>\r\n      </Container>\r\n      <Typography variant=\"body1\">\r\n        Note: All times are in your local time zone!\r\n      </Typography>\r\n      <FormControlLabel\r\n        control={\r\n          <Switch\r\n            checked={showPastEvents}\r\n            onChange={() => {\r\n              setShowPastEvents(!showPastEvents);\r\n            }}\r\n            name=\"showPastEventsSwitch\"\r\n            color=\"primary\"\r\n          />\r\n        }\r\n        label=\"Show Past Events\"\r\n      />\r\n      {binEventsByDate().map((eventList, dayIndex) => {\r\n        return (\r\n          <Fragment key={`day_${dayIndex}`}>\r\n            <Container className={classes.pageTitle}>\r\n              <Typography variant=\"h5\">\r\n                {eventList[0].startTime.toLocaleDateString()}\r\n              </Typography>\r\n            </Container>\r\n            <List>\r\n              {eventList.map((event, index) => {\r\n                return (\r\n                  <EventInfo\r\n                    key={`event_${index}`}\r\n                    event={event}\r\n                    currentTimeMilliseconds={currentTimeMilliseconds}\r\n                    classes={classes}\r\n                  />\r\n                );\r\n              })}\r\n            </List>\r\n          </Fragment>\r\n        );\r\n      })}\r\n\r\n      {/** TODO: Allow Toggle on/off for showing past events */}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default EventsMain;\r\n","import {\r\n  Avatar,\r\n  ListItem,\r\n  ListItemAvatar,\r\n  ListItemText,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport CategoryIcon from \"@material-ui/icons/Category\";\r\nimport React, { Fragment } from \"react\";\r\nimport { PrizeSchema } from \"../../../../@Types\";\r\n\r\ndeclare interface PrizeInfoProps {\r\n  prize: PrizeSchema;\r\n  classes: any;\r\n}\r\n\r\nconst PrizeInfo: React.FunctionComponent<PrizeInfoProps> = ({\r\n  prize,\r\n  classes,\r\n}) => {\r\n  return (\r\n    <ListItem alignItems=\"flex-start\">\r\n      <ListItemAvatar>\r\n        <Avatar className={classes.brandingColor}>\r\n          <CategoryIcon />\r\n        </Avatar>\r\n      </ListItemAvatar>\r\n      <ListItemText\r\n        primary={`${prize.prizeName} ${\r\n          prize.prizeSponsor ? \"sponsored by \" + prize.prizeSponsor : \"\"\r\n        }`}\r\n        secondary={\r\n          <Fragment>\r\n            <Typography variant=\"body1\" component=\"span\">\r\n              {prize.prize}{\" \"}\r\n              {prize.prizeValue ? `(${prize.prizeValue} value)` : \"\"}\r\n            </Typography>\r\n            <br />\r\n            {prize.prizeDescription}\r\n            {prize.eligibility && <br />}\r\n            {prize.eligibility}\r\n          </Fragment>\r\n        }\r\n      />\r\n    </ListItem>\r\n  );\r\n};\r\n\r\nexport default PrizeInfo;\r\n","import { Container, List, Typography } from \"@material-ui/core\";\r\nimport React, { Fragment } from \"react\";\r\nimport { PrizeSchema } from \"../../../../@Types\";\r\nimport PrizeInfo from \"./PrizeInfo\";\r\n\r\ndeclare interface PrizesMainProps {\r\n  prizes: PrizeSchema[];\r\n  classes: any;\r\n}\r\n\r\nconst PrizesMain: React.FunctionComponent<PrizesMainProps> = ({\r\n  prizes,\r\n  classes,\r\n}) => {\r\n  return (\r\n    <Fragment>\r\n      <Container className={classes.pageTitle}>\r\n        <Typography variant=\"h4\">Prizes</Typography>\r\n      </Container>\r\n      <List>\r\n        {prizes.map((prize, index) => {\r\n          return (\r\n            <PrizeInfo key={`prize_${index}`} prize={prize} classes={classes} />\r\n          );\r\n        })}\r\n      </List>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default PrizesMain;\r\n","import {\r\n  Avatar,\r\n  Fab,\r\n  ListItem,\r\n  ListItemAvatar,\r\n  ListItemSecondaryAction,\r\n  ListItemText,\r\n} from \"@material-ui/core\";\r\nimport BookIcon from \"@material-ui/icons/Book\";\r\nimport LaunchIcon from \"@material-ui/icons/Launch\";\r\nimport React from \"react\";\r\nimport { ResourceSchema } from \"../../../../@Types\";\r\n\r\ndeclare interface ResourceInfoProps {\r\n  resource: ResourceSchema;\r\n  classes: any;\r\n}\r\n\r\nconst ResourceInfo: React.FunctionComponent<ResourceInfoProps> = ({\r\n  resource,\r\n  classes,\r\n}) => {\r\n  return (\r\n    <ListItem alignItems=\"flex-start\">\r\n      <ListItemAvatar>\r\n        <Avatar className={classes.brandingColor}>\r\n          <BookIcon />\r\n        </Avatar>\r\n      </ListItemAvatar>\r\n      <ListItemText\r\n        primary={`${resource.resourceName} ${\r\n          resource.resourceValue ? \"(\" + resource.resourceValue + \" value)\" : \"\"\r\n        }`}\r\n        secondary={resource.resourceDescription}\r\n      />\r\n      <ListItemSecondaryAction>\r\n        <Fab\r\n          color=\"primary\"\r\n          onClick={() => {\r\n            window.open(resource.resourceLink, \"_blank\");\r\n          }}\r\n        >\r\n          <LaunchIcon />\r\n        </Fab>\r\n      </ListItemSecondaryAction>\r\n    </ListItem>\r\n  );\r\n};\r\n\r\nexport default ResourceInfo;\r\n","import { Container, List, Typography } from \"@material-ui/core\";\r\nimport React, { Fragment } from \"react\";\r\nimport { ResourceSchema } from \"../../../../@Types\";\r\nimport ResourceInfo from \"./ResourceInfo\";\r\n\r\ndeclare interface ResourcesMainProps {\r\n  resources: ResourceSchema[];\r\n  classes: any;\r\n}\r\n\r\nconst ResourcesMain: React.FunctionComponent<ResourcesMainProps> = ({\r\n  resources,\r\n  classes,\r\n}) => {\r\n  return (\r\n    <Fragment>\r\n      <Container className={classes.pageTitle}>\r\n        <Typography variant=\"h4\">Resources</Typography>\r\n      </Container>\r\n      <List>\r\n        {resources.map((resource, index) => {\r\n          return (\r\n            <ResourceInfo\r\n              key={`resource_${index}`}\r\n              resource={resource}\r\n              classes={classes}\r\n            />\r\n          );\r\n        })}\r\n      </List>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default ResourcesMain;\r\n","import { Divider } from \"@material-ui/core\";\r\nimport React, { Fragment } from \"react\";\r\nimport { Schema } from \"../../../@Types\";\r\nimport EventsMain from \"../Content/Events/EventsMain\";\r\nimport PrizesMain from \"../Content/Prizes/PrizesMain\";\r\nimport ResourcesMain from \"../Content/Resources/ResourcesMain\";\r\n\r\ndeclare interface ScrollingSectionsProps {\r\n  config: Schema;\r\n  classes: any;\r\n}\r\n\r\nconst ScrollingSections: React.FunctionComponent<ScrollingSectionsProps> = ({\r\n  config,\r\n  classes,\r\n}) => {\r\n  return (\r\n    <Fragment>\r\n      {config.events.length > 0 && (\r\n        <Fragment>\r\n          <Divider className={classes.marginedTopBottom} />\r\n          <EventsMain events={config.events} classes={classes} />\r\n        </Fragment>\r\n      )}\r\n      {config.prizes.length > 0 && (\r\n        <Fragment>\r\n          <Divider className={classes.marginedTopBottom} />\r\n          <PrizesMain prizes={config.prizes} classes={classes} />\r\n        </Fragment>\r\n      )}\r\n      {config.resources.length > 0 && (\r\n        <Fragment>\r\n          <Divider className={classes.marginedTopBottom} />\r\n          <ResourcesMain resources={config.resources} classes={classes} />\r\n        </Fragment>\r\n      )}\r\n      {/** TODO: CONTENT GOES HERE */}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default ScrollingSections;\r\n","import { AppBar, Box, Divider, Tab, Tabs } from \"@material-ui/core\";\r\nimport React, { Fragment } from \"react\";\r\nimport SwipeableViews from \"react-swipeable-views\";\r\nimport { Schema } from \"../../../@Types\";\r\nimport EventsMain from \"../Content/Events/EventsMain\";\r\nimport PrizesMain from \"../Content/Prizes/PrizesMain\";\r\nimport ResourcesMain from \"../Content/Resources/ResourcesMain\";\r\n\r\ninterface TabPanelProps {\r\n  children?: React.ReactNode;\r\n  dir?: string;\r\n  index: any;\r\n  value: any;\r\n}\r\n\r\nfunction TabPanel({ children, value, index }: TabPanelProps) {\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`full-width-tabpanel-${index}`}\r\n      aria-labelledby={`full-width-tab-${index}`}\r\n    >\r\n      {value === index && <Box>{children}</Box>}\r\n    </div>\r\n  );\r\n}\r\n\r\ndeclare interface TabbedSectionsProps {\r\n  config: Schema;\r\n  classes: any;\r\n}\r\n\r\nconst TabbedSections: React.FunctionComponent<TabbedSectionsProps> = ({\r\n  config,\r\n  classes,\r\n}) => {\r\n  const [currentTab, setCurrentTab] = React.useState(0);\r\n\r\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\r\n    setCurrentTab(newValue);\r\n  };\r\n\r\n  const handleChangeIndex = (index: number) => {\r\n    setCurrentTab(index);\r\n  };\r\n\r\n  const showEvents = config.events.length > 0;\r\n  const showPrizes = config.prizes.length > 0;\r\n  const showResources = config.resources.length > 0;\r\n  /** TODO: CONTENT GOES HERE */\r\n\r\n  const tabs = [] as JSX.Element[];\r\n\r\n  const generateTabOrder = () => {\r\n    if (showEvents) {\r\n      tabs.push(<EventsMain events={config.events} classes={classes} />);\r\n    }\r\n    if (showPrizes) {\r\n      tabs.push(<PrizesMain prizes={config.prizes} classes={classes} />);\r\n    }\r\n    if (showResources) {\r\n      tabs.push(\r\n        <ResourcesMain resources={config.resources} classes={classes} />\r\n      );\r\n    }\r\n    /** TODO: CONTENT GOES HERE */\r\n  };\r\n\r\n  generateTabOrder();\r\n\r\n  return (\r\n    <Fragment>\r\n      {tabs.length > 0 && (\r\n        <Fragment>\r\n          <Divider className={classes.marginedTopBottom} />\r\n          <AppBar position=\"static\" color=\"default\">\r\n            <Tabs\r\n              value={currentTab}\r\n              onChange={handleChange}\r\n              indicatorColor=\"primary\"\r\n              textColor=\"primary\"\r\n              variant=\"scrollable\"\r\n              scrollButtons=\"auto\"\r\n            >\r\n              {showEvents && <Tab label=\"Events and Activities\" />}\r\n              {showPrizes && <Tab label=\"Prizes\" />}\r\n              {showResources && <Tab label=\"Resources\" />}\r\n              {/** TODO: CONTENT GOES HERE */}\r\n            </Tabs>\r\n          </AppBar>\r\n\r\n          <SwipeableViews\r\n            axis={\"x\"}\r\n            index={currentTab}\r\n            onChangeIndex={handleChangeIndex}\r\n          >\r\n            {tabs.map((element, index) => {\r\n              return (\r\n                <TabPanel value={currentTab} index={index} key={`tab_${index}`}>\r\n                  {element}\r\n                </TabPanel>\r\n              );\r\n            })}\r\n          </SwipeableViews>\r\n        </Fragment>\r\n      )}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default TabbedSections;\r\n","import {\r\n  IconButton,\r\n  Snackbar,\r\n  SnackbarContent,\r\n  Theme\r\n} from \"@material-ui/core\";\r\nimport CheckCircleIcon from \"@material-ui/icons/CheckCircle\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport ErrorIcon from \"@material-ui/icons/Error\";\r\nimport InfoIcon from \"@material-ui/icons/Info\";\r\nimport WarningIcon from \"@material-ui/icons/Warning\";\r\nimport { createStyles, makeStyles } from \"@material-ui/styles\";\r\nimport clsx from \"clsx\";\r\nimport React, { SyntheticEvent } from \"react\";\r\n\r\nconst variantIcon = {\r\n  success: CheckCircleIcon,\r\n  warning: WarningIcon,\r\n  error: ErrorIcon,\r\n  info: InfoIcon\r\n};\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    success: {\r\n      color: theme.palette.getContrastText(theme.palette.success.main),\r\n      backgroundColor: theme.palette.success.main\r\n    },\r\n    error: {\r\n      color: theme.palette.getContrastText(theme.palette.error.main),\r\n      backgroundColor: theme.palette.error.main\r\n    },\r\n    info: {\r\n      color: theme.palette.getContrastText(theme.palette.info.main),\r\n      backgroundColor: theme.palette.info.main\r\n    },\r\n    warning: {\r\n      color: theme.palette.getContrastText(theme.palette.warning.main),\r\n      backgroundColor: theme.palette.warning.main\r\n    },\r\n    icon: {\r\n      fontSize: 20\r\n    },\r\n    iconVariant: {\r\n      opacity: 0.9,\r\n      marginRight: theme.spacing(1)\r\n    },\r\n    message: {\r\n      display: \"flex\",\r\n      alignItems: \"center\"\r\n    }\r\n  })\r\n);\r\n\r\nexport interface SnackbarProps {\r\n  className?: string;\r\n  message?: string;\r\n  onClose?: () => void;\r\n  variant: keyof typeof variantIcon;\r\n}\r\n\r\nconst MySnackbarContentWrapper: React.FunctionComponent<SnackbarProps> = (\r\n  props: SnackbarProps\r\n) => {\r\n  const classes = useStyles();\r\n  const { className, message, onClose, variant, ...other } = props;\r\n  const Icon = variantIcon[variant];\r\n\r\n  return (\r\n    <SnackbarContent\r\n      className={clsx(classes[variant], className)}\r\n      aria-describedby=\"client-snackbar\"\r\n      message={\r\n        <span id=\"client-snackbar\" className={classes.message}>\r\n          <Icon className={clsx(classes.icon, classes.iconVariant)} />\r\n          {message}\r\n        </span>\r\n      }\r\n      action={[\r\n        <IconButton\r\n          key=\"close\"\r\n          aria-label=\"close\"\r\n          color=\"inherit\"\r\n          onClick={onClose}\r\n        >\r\n          <CloseIcon className={classes.icon} />\r\n        </IconButton>\r\n      ]}\r\n      {...other}\r\n    />\r\n  );\r\n};\r\n\r\ndeclare enum NotificationTypesEnum {\r\n  success,\r\n  error,\r\n  info,\r\n  warning\r\n}\r\n\r\ndeclare type NotificationTypes = keyof typeof NotificationTypesEnum;\r\n\r\nexport declare interface NotificationMessage {\r\n  message: string;\r\n  type: NotificationTypes;\r\n  open: boolean;\r\n}\r\n\r\ndeclare interface MessageProps {\r\n  notification: NotificationMessage;\r\n  setNotification: (notificationMessage: NotificationMessage) => void;\r\n}\r\n\r\nexport default function NotificationBar({\r\n  notification,\r\n  setNotification\r\n}: MessageProps) {\r\n  const handleClose = (event?: SyntheticEvent, reason?: string) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    const type = notification.type;\r\n    const message = notification.message;\r\n    setNotification({ type, message, open: false });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Snackbar\r\n        anchorOrigin={{\r\n          vertical: \"top\",\r\n          horizontal: \"center\"\r\n        }}\r\n        open={notification.open}\r\n        autoHideDuration={6000}\r\n        onClose={handleClose}\r\n      >\r\n        <MySnackbarContentWrapper\r\n          onClose={handleClose}\r\n          variant={notification.type}\r\n          message={notification.message}\r\n        />\r\n      </Snackbar>\r\n    </div>\r\n  );\r\n}\r\n","import { Container, Divider, Fab } from \"@material-ui/core\";\r\nimport BugReportIcon from \"@material-ui/icons/BugReport\";\r\nimport React, { Fragment } from \"react\";\r\nimport { getConfig } from \"../Scripts/getConfig\";\r\nimport { styles } from \"../Styles\";\r\nimport DebugMain from \"./Content/Debug/DebugMain\";\r\nimport LinksMain from \"./Content/Links/LinksMain\";\r\nimport StagesMain from \"./Content/Stages/StagesMain\";\r\nimport NavBar from \"./Layouts/NavBar\";\r\nimport ScrollingSections from \"./Layouts/ScrollingSections\";\r\nimport TabbedSections from \"./Layouts/TabbedSections\";\r\nimport NotificationBar, { NotificationMessage } from \"./Misc/Notifications\";\r\n\r\ndeclare interface MainProps {\r\n  theme: \"light\" | \"dark\";\r\n  toggleTheme: () => void;\r\n}\r\n\r\nconst Main: React.FunctionComponent<MainProps> = ({ theme, toggleTheme }) => {\r\n  const [notification, setNotification] = React.useState<NotificationMessage>({\r\n    type: \"info\",\r\n    message: \"\",\r\n    open: false,\r\n  });\r\n  const [debugInfo, setDebugInfo] = React.useState<boolean>(false);\r\n  const config = getConfig();\r\n\r\n  const classes = styles();\r\n\r\n  return (\r\n    <Fragment>\r\n      <NavBar\r\n        pageTitle={config.config.hackathonName}\r\n        theme={theme}\r\n        toggleTheme={toggleTheme}\r\n      />\r\n      <Container className={classes.marginedTopBottom}>\r\n        {debugInfo && (\r\n          <Fragment>\r\n            <DebugMain config={config} classes={classes} />\r\n            <Divider className={classes.marginedTopBottom} />\r\n          </Fragment>\r\n        )}\r\n        <StagesMain stages={config.stages} classes={classes} />\r\n        <Divider className={classes.marginedTopBottom} />{\" \"}\r\n        {/* FIXME: Only show the divider if there is a timer/ */}\r\n        <LinksMain links={config.links} classes={classes} />\r\n        {config.config.tabs ? (\r\n          <TabbedSections config={config} classes={classes} />\r\n        ) : (\r\n          <ScrollingSections config={config} classes={classes} />\r\n        )}\r\n      </Container>\r\n      <NotificationBar\r\n        notification={notification}\r\n        setNotification={setNotification}\r\n      />\r\n      {window.location.href.includes(\"localhost\") && (\r\n        <Fab\r\n          color=\"primary\"\r\n          className={classes.fab}\r\n          onClick={() => {\r\n            setDebugInfo(!debugInfo);\r\n          }}\r\n        >\r\n          <BugReportIcon />\r\n        </Fab>\r\n      )}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import { CssBaseline, ThemeProvider } from \"@material-ui/core\";\r\nimport React, { Fragment } from \"react\";\r\nimport Main from \"../Components/Main\";\r\nimport { darkTheme, lightTheme } from \"./theme\";\r\nimport { useDarkMode } from \"./useDarkMode\";\r\n\r\nconst CustomThemeProvider: React.FunctionComponent = () => {\r\n  const { theme, toggleTheme, componentMounted } = useDarkMode();\r\n\r\n  if (!componentMounted) {\r\n    return <Fragment />;\r\n  }\r\n\r\n  return (\r\n    <ThemeProvider theme={theme === \"dark\" ? darkTheme : lightTheme}>\r\n      <Fragment>\r\n        <CssBaseline />\r\n        <Main theme={theme} toggleTheme={toggleTheme} />\r\n      </Fragment>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default CustomThemeProvider;\r\n","import React from \"react\";\r\n\r\nexport const useDarkMode = () => {\r\n  const [theme, setTheme] = React.useState<\"light\" | \"dark\">(\"light\");\r\n  const [componentMounted, setComponentMounted] = React.useState(false);\r\n  const setMode = (mode: \"light\" | \"dark\") => {\r\n    console.log(mode);\r\n    window.localStorage.setItem(\"theme\", mode);\r\n    setTheme(mode);\r\n  };\r\n\r\n  const toggleTheme = () => {\r\n    if (theme === \"light\") {\r\n      setMode(\"dark\");\r\n    } else {\r\n      setMode(\"light\");\r\n    }\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    const localTheme = window.localStorage.getItem(\"theme\") as\r\n      | \"light\"\r\n      | \"dark\"\r\n      | null;\r\n    window.matchMedia &&\r\n    window.matchMedia(\"(prefers-color-scheme: dark)\").matches &&\r\n    !localTheme\r\n      ? setMode(\"dark\")\r\n      : localTheme\r\n      ? setTheme(localTheme)\r\n      : setMode(\"light\");\r\n    setComponentMounted(true);\r\n  }, []);\r\n\r\n  return { theme, toggleTheme, componentMounted };\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport CustomThemeProvider from \"./Styles/CustomThemeProvider\";\r\n\r\nReactDOM.render(<CustomThemeProvider />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}